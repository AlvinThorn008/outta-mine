import { b2Contact } from './b2Contact';
import { b2Assert } from '../../common/b2Settings';
export class b2ContactFactory {
    constructor() {
        this.m_registers = [];
        this.pool = [];
        this.InitializeRegisters();
    }
    createFromPool() {
        return this.pool.pop() ?? new b2Contact();
    }
    destroyToPool(contact) {
        this.pool.push(contact);
    }
    AddType(typeA, typeB) {
        this.m_registers[(typeA << 2) | typeB] = 2;
        if (typeA !== typeB) {
            this.m_registers[(typeB << 2) | typeA] = 1;
        }
    }
    InitializeRegisters() {
        for (let i = 0; i < 4 /* e_shapeTypeCount */; ++i) {
            for (let j = 0; j < 4 /* e_shapeTypeCount */; ++j) {
                this.m_registers[(i << 2) | j] = 0;
            }
        }
        this.AddType(0 /* e_circleShape */, 0 /* e_circleShape */);
        this.AddType(2 /* e_polygonShape */, 0 /* e_circleShape */);
        this.AddType(2 /* e_polygonShape */, 2 /* e_polygonShape */);
        this.AddType(1 /* e_edgeShape */, 0 /* e_circleShape */);
        this.AddType(1 /* e_edgeShape */, 2 /* e_polygonShape */);
        this.AddType(3 /* e_chainShape */, 0 /* e_circleShape */);
        this.AddType(3 /* e_chainShape */, 2 /* e_polygonShape */);
    }
    Create(fixtureA, indexA, fixtureB, indexB) {
        const typeA = fixtureA.GetType();
        const typeB = fixtureB.GetType();
        !!B2_DEBUG && b2Assert(0 <= typeA && typeA < 4 /* e_shapeTypeCount */);
        !!B2_DEBUG && b2Assert(0 <= typeB && typeB < 4 /* e_shapeTypeCount */);
        const reg = this.m_registers[(typeA << 2) | typeB];
        if (reg === 0) {
            return null;
        }
        const c = this.createFromPool();
        if (reg === 2) {
            c.Reset(fixtureA, indexA, fixtureB, indexB);
        }
        else if (reg === 1) {
            c.Reset(fixtureB, indexB, fixtureA, indexA);
        }
        return c;
    }
    Destroy(contact) {
        if (B2_DEBUG) {
            const typeA = contact.m_fixtureA.GetType();
            const typeB = contact.m_fixtureB.GetType();
            b2Assert(0 <= typeA && typeB < 4 /* e_shapeTypeCount */);
            b2Assert(0 <= typeA && typeB < 4 /* e_shapeTypeCount */);
        }
        this.destroyToPool(contact);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYjJDb250YWN0RmFjdG9yeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9keW5hbWljcy9jb250YWN0cy9iMkNvbnRhY3RGYWN0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFeEMsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBRW5ELE1BQU0sT0FBTyxnQkFBZ0I7SUFJM0I7UUFIUyxnQkFBVyxHQUFhLEVBQUUsQ0FBQztRQUNwQyxTQUFJLEdBQWdCLEVBQUUsQ0FBQztRQUdyQixJQUFJLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztJQUM3QixDQUFDO0lBRU8sY0FBYztRQUNwQixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLElBQUksSUFBSSxTQUFTLEVBQUUsQ0FBQztJQUM1QyxDQUFDO0lBRU8sYUFBYSxDQUFDLE9BQWtCO1FBQ3RDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQzFCLENBQUM7SUFFTyxPQUFPLENBQUMsS0FBa0IsRUFBRSxLQUFrQjtRQUNwRCxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsS0FBSyxJQUFJLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUMzQyxJQUFJLEtBQUssS0FBSyxLQUFLLEVBQUU7WUFDbkIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLEtBQUssSUFBSSxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDNUM7SUFDSCxDQUFDO0lBRU8sbUJBQW1CO1FBQ3pCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsMkJBQStCLEVBQUUsRUFBRSxDQUFDLEVBQUU7WUFDckQsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQywyQkFBK0IsRUFBRSxFQUFFLENBQUMsRUFBRTtnQkFDckQsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7YUFDcEM7U0FDRjtRQUVELElBQUksQ0FBQyxPQUFPLDhDQUFzRCxDQUFDO1FBQ25FLElBQUksQ0FBQyxPQUFPLCtDQUF1RCxDQUFDO1FBQ3BFLElBQUksQ0FBQyxPQUFPLGdEQUF3RCxDQUFDO1FBQ3JFLElBQUksQ0FBQyxPQUFPLDRDQUFvRCxDQUFDO1FBQ2pFLElBQUksQ0FBQyxPQUFPLDZDQUFxRCxDQUFDO1FBQ2xFLElBQUksQ0FBQyxPQUFPLDZDQUFxRCxDQUFDO1FBQ2xFLElBQUksQ0FBQyxPQUFPLDhDQUFzRCxDQUFDO0lBQ3JFLENBQUM7SUFFRCxNQUFNLENBQ0osUUFBbUIsRUFDbkIsTUFBYyxFQUNkLFFBQW1CLEVBQ25CLE1BQWM7UUFFZCxNQUFNLEtBQUssR0FBZ0IsUUFBUSxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQzlDLE1BQU0sS0FBSyxHQUFnQixRQUFRLENBQUMsT0FBTyxFQUFFLENBQUM7UUFFOUMsQ0FBQyxDQUFDLFFBQVEsSUFBSSxRQUFRLENBQUMsQ0FBQyxJQUFJLEtBQUssSUFBSSxLQUFLLDJCQUErQixDQUFDLENBQUM7UUFDM0UsQ0FBQyxDQUFDLFFBQVEsSUFBSSxRQUFRLENBQUMsQ0FBQyxJQUFJLEtBQUssSUFBSSxLQUFLLDJCQUErQixDQUFDLENBQUM7UUFFM0UsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLEtBQUssSUFBSSxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQztRQUVuRCxJQUFJLEdBQUcsS0FBSyxDQUFDLEVBQUU7WUFDYixPQUFPLElBQUksQ0FBQztTQUNiO1FBQ0QsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO1FBQ2hDLElBQUksR0FBRyxLQUFLLENBQUMsRUFBRTtZQUNiLENBQUMsQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsTUFBTSxDQUFDLENBQUM7U0FDN0M7YUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLEVBQUU7WUFDcEIsQ0FBQyxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxNQUFNLENBQUMsQ0FBQztTQUM3QztRQUVELE9BQU8sQ0FBQyxDQUFDO0lBQ1gsQ0FBQztJQUVELE9BQU8sQ0FBQyxPQUFrQjtRQUN4QixJQUFJLFFBQVEsRUFBRTtZQUNaLE1BQU0sS0FBSyxHQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDM0MsTUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDLFVBQVUsQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUMzQyxRQUFRLENBQUMsQ0FBQyxJQUFJLEtBQUssSUFBSSxLQUFLLDJCQUErQixDQUFDLENBQUM7WUFDN0QsUUFBUSxDQUFDLENBQUMsSUFBSSxLQUFLLElBQUksS0FBSywyQkFBK0IsQ0FBQyxDQUFDO1NBQzlEO1FBRUQsSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUM5QixDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBiMlNoYXBlVHlwZSB9IGZyb20gJy4uLy4uL2NvbGxpc2lvbi9zaGFwZXMvYjJTaGFwZSc7XHJcbmltcG9ydCB7IGIyQ29udGFjdCB9IGZyb20gJy4vYjJDb250YWN0JztcclxuaW1wb3J0IHsgYjJGaXh0dXJlIH0gZnJvbSAnLi4vYjJGaXh0dXJlJztcclxuaW1wb3J0IHsgYjJBc3NlcnQgfSBmcm9tICcuLi8uLi9jb21tb24vYjJTZXR0aW5ncyc7XHJcblxyXG5leHBvcnQgY2xhc3MgYjJDb250YWN0RmFjdG9yeSB7XHJcbiAgcmVhZG9ubHkgbV9yZWdpc3RlcnM6IG51bWJlcltdID0gW107XHJcbiAgcG9vbDogYjJDb250YWN0W10gPSBbXTtcclxuXHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICB0aGlzLkluaXRpYWxpemVSZWdpc3RlcnMoKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgY3JlYXRlRnJvbVBvb2woKSB7XHJcbiAgICByZXR1cm4gdGhpcy5wb29sLnBvcCgpID8/IG5ldyBiMkNvbnRhY3QoKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgZGVzdHJveVRvUG9vbChjb250YWN0OiBiMkNvbnRhY3QpOiB2b2lkIHtcclxuICAgIHRoaXMucG9vbC5wdXNoKGNvbnRhY3QpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBBZGRUeXBlKHR5cGVBOiBiMlNoYXBlVHlwZSwgdHlwZUI6IGIyU2hhcGVUeXBlKTogdm9pZCB7XHJcbiAgICB0aGlzLm1fcmVnaXN0ZXJzWyh0eXBlQSA8PCAyKSB8IHR5cGVCXSA9IDI7XHJcbiAgICBpZiAodHlwZUEgIT09IHR5cGVCKSB7XHJcbiAgICAgIHRoaXMubV9yZWdpc3RlcnNbKHR5cGVCIDw8IDIpIHwgdHlwZUFdID0gMTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByaXZhdGUgSW5pdGlhbGl6ZVJlZ2lzdGVycygpOiB2b2lkIHtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYjJTaGFwZVR5cGUuZV9zaGFwZVR5cGVDb3VudDsgKytpKSB7XHJcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgYjJTaGFwZVR5cGUuZV9zaGFwZVR5cGVDb3VudDsgKytqKSB7XHJcbiAgICAgICAgdGhpcy5tX3JlZ2lzdGVyc1soaSA8PCAyKSB8IGpdID0gMDtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuQWRkVHlwZShiMlNoYXBlVHlwZS5lX2NpcmNsZVNoYXBlLCBiMlNoYXBlVHlwZS5lX2NpcmNsZVNoYXBlKTtcclxuICAgIHRoaXMuQWRkVHlwZShiMlNoYXBlVHlwZS5lX3BvbHlnb25TaGFwZSwgYjJTaGFwZVR5cGUuZV9jaXJjbGVTaGFwZSk7XHJcbiAgICB0aGlzLkFkZFR5cGUoYjJTaGFwZVR5cGUuZV9wb2x5Z29uU2hhcGUsIGIyU2hhcGVUeXBlLmVfcG9seWdvblNoYXBlKTtcclxuICAgIHRoaXMuQWRkVHlwZShiMlNoYXBlVHlwZS5lX2VkZ2VTaGFwZSwgYjJTaGFwZVR5cGUuZV9jaXJjbGVTaGFwZSk7XHJcbiAgICB0aGlzLkFkZFR5cGUoYjJTaGFwZVR5cGUuZV9lZGdlU2hhcGUsIGIyU2hhcGVUeXBlLmVfcG9seWdvblNoYXBlKTtcclxuICAgIHRoaXMuQWRkVHlwZShiMlNoYXBlVHlwZS5lX2NoYWluU2hhcGUsIGIyU2hhcGVUeXBlLmVfY2lyY2xlU2hhcGUpO1xyXG4gICAgdGhpcy5BZGRUeXBlKGIyU2hhcGVUeXBlLmVfY2hhaW5TaGFwZSwgYjJTaGFwZVR5cGUuZV9wb2x5Z29uU2hhcGUpO1xyXG4gIH1cclxuXHJcbiAgQ3JlYXRlKFxyXG4gICAgZml4dHVyZUE6IGIyRml4dHVyZSxcclxuICAgIGluZGV4QTogbnVtYmVyLFxyXG4gICAgZml4dHVyZUI6IGIyRml4dHVyZSxcclxuICAgIGluZGV4QjogbnVtYmVyLFxyXG4gICk6IGIyQ29udGFjdCB8IG51bGwge1xyXG4gICAgY29uc3QgdHlwZUE6IGIyU2hhcGVUeXBlID0gZml4dHVyZUEuR2V0VHlwZSgpO1xyXG4gICAgY29uc3QgdHlwZUI6IGIyU2hhcGVUeXBlID0gZml4dHVyZUIuR2V0VHlwZSgpO1xyXG5cclxuICAgICEhQjJfREVCVUcgJiYgYjJBc3NlcnQoMCA8PSB0eXBlQSAmJiB0eXBlQSA8IGIyU2hhcGVUeXBlLmVfc2hhcGVUeXBlQ291bnQpO1xyXG4gICAgISFCMl9ERUJVRyAmJiBiMkFzc2VydCgwIDw9IHR5cGVCICYmIHR5cGVCIDwgYjJTaGFwZVR5cGUuZV9zaGFwZVR5cGVDb3VudCk7XHJcblxyXG4gICAgY29uc3QgcmVnID0gdGhpcy5tX3JlZ2lzdGVyc1sodHlwZUEgPDwgMikgfCB0eXBlQl07XHJcblxyXG4gICAgaWYgKHJlZyA9PT0gMCkge1xyXG4gICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuICAgIGNvbnN0IGMgPSB0aGlzLmNyZWF0ZUZyb21Qb29sKCk7XHJcbiAgICBpZiAocmVnID09PSAyKSB7XHJcbiAgICAgIGMuUmVzZXQoZml4dHVyZUEsIGluZGV4QSwgZml4dHVyZUIsIGluZGV4Qik7XHJcbiAgICB9IGVsc2UgaWYgKHJlZyA9PT0gMSkge1xyXG4gICAgICBjLlJlc2V0KGZpeHR1cmVCLCBpbmRleEIsIGZpeHR1cmVBLCBpbmRleEEpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBjO1xyXG4gIH1cclxuXHJcbiAgRGVzdHJveShjb250YWN0OiBiMkNvbnRhY3QpOiB2b2lkIHtcclxuICAgIGlmIChCMl9ERUJVRykge1xyXG4gICAgICBjb25zdCB0eXBlQSA9IGNvbnRhY3QubV9maXh0dXJlQS5HZXRUeXBlKCk7XHJcbiAgICAgIGNvbnN0IHR5cGVCID0gY29udGFjdC5tX2ZpeHR1cmVCLkdldFR5cGUoKTtcclxuICAgICAgYjJBc3NlcnQoMCA8PSB0eXBlQSAmJiB0eXBlQiA8IGIyU2hhcGVUeXBlLmVfc2hhcGVUeXBlQ291bnQpO1xyXG4gICAgICBiMkFzc2VydCgwIDw9IHR5cGVBICYmIHR5cGVCIDwgYjJTaGFwZVR5cGUuZV9zaGFwZVR5cGVDb3VudCk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5kZXN0cm95VG9Qb29sKGNvbnRhY3QpO1xyXG4gIH1cclxufVxyXG4iXX0=