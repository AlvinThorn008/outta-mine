import { b2Color } from '../common/b2Draw';
import { b2Transform, b2Vec2 } from '../common/b2Math';
function DrawParticleSystem(drawer, system) {
    const particleCount = system.GetParticleCount();
    if (particleCount) {
        const radius = system.GetRadius();
        const positionBuffer = system.GetPositionBuffer();
        if (system.m_colorBuffer.data) {
            const colorBuffer = system.GetColorBuffer();
            drawer.DrawParticles(positionBuffer, radius, colorBuffer, particleCount);
        }
        else {
            drawer.DrawParticles(positionBuffer, radius, null, particleCount);
        }
    }
}
const DrawJoint_s_p1 = new b2Vec2();
const DrawJoint_s_p2 = new b2Vec2();
const DrawJoint_s_color = new b2Color(0.5, 0.8, 0.8);
const DrawJoint_s_c = new b2Color();
function DrawJoint(drawer, joint) {
    const bodyA = joint.GetBodyA();
    const bodyB = joint.GetBodyB();
    const xf1 = bodyA.m_xf;
    const xf2 = bodyB.m_xf;
    const x1 = xf1.p;
    const x2 = xf2.p;
    const p1 = joint.GetAnchorA(DrawJoint_s_p1);
    const p2 = joint.GetAnchorB(DrawJoint_s_p2);
    const color = DrawJoint_s_color.SetRGB(0.5, 0.8, 0.8);
    switch (joint.m_type) {
        case 3 /* e_distanceJoint */:
            drawer.DrawSegment(p1, p2, color);
            break;
        case 4 /* e_pulleyJoint */: {
            const pulley = joint;
            const s1 = pulley.GetGroundAnchorA();
            const s2 = pulley.GetGroundAnchorB();
            drawer.DrawSegment(s1, p1, color);
            drawer.DrawSegment(s2, p2, color);
            drawer.DrawSegment(s1, s2, color);
            break;
        }
        case 5 /* e_mouseJoint */: {
            const c = DrawJoint_s_c;
            c.Set(0.0, 1.0, 0.0);
            drawer.DrawPoint(p1, 4.0, c);
            drawer.DrawPoint(p2, 4.0, c);
            c.Set(0.8, 0.8, 0.8);
            drawer.DrawSegment(p1, p2, c);
            break;
        }
        default:
            drawer.DrawSegment(x1, p1, color);
            drawer.DrawSegment(p1, p2, color);
            drawer.DrawSegment(x2, p2, color);
    }
}
const DrawShape_s_ghostColor = new b2Color();
function DrawShape(drawer, fixture, color) {
    const shape = fixture.GetShape();
    switch (shape.m_type) {
        case 0 /* e_circleShape */: {
            const circle = shape;
            const center = circle.m_p;
            const radius = circle.m_radius;
            const axis = b2Vec2.UNITX;
            drawer.DrawSolidCircle(center, radius, axis, color);
            break;
        }
        case 1 /* e_edgeShape */: {
            const edge = shape;
            const v1 = edge.m_vertex1;
            const v2 = edge.m_vertex2;
            drawer.DrawSegment(v1, v2, color);
            break;
        }
        case 3 /* e_chainShape */: {
            const chain = shape;
            const count = chain.m_count;
            const vertices = chain.m_vertices;
            const ghostColor = DrawShape_s_ghostColor.SetRGBA(0.75 * color.r, 0.75 * color.g, 0.75 * color.b, color.a);
            let v1 = vertices[0];
            drawer.DrawPoint(v1, 4.0, color);
            if (chain.m_hasPrevVertex) {
                const vp = chain.m_prevVertex;
                drawer.DrawSegment(vp, v1, ghostColor);
                drawer.DrawCircle(vp, 0.1, ghostColor);
            }
            for (let i = 1; i < count; ++i) {
                const v2 = vertices[i];
                drawer.DrawSegment(v1, v2, color);
                drawer.DrawPoint(v2, 4.0, color);
                v1 = v2;
            }
            if (chain.m_hasNextVertex) {
                const vn = chain.m_nextVertex;
                drawer.DrawSegment(vn, v1, ghostColor);
                drawer.DrawCircle(vn, 0.1, ghostColor);
            }
            break;
        }
        case 2 /* e_polygonShape */: {
            const poly = shape;
            const vertexCount = poly.m_count;
            const vertices = poly.m_vertices;
            drawer.DrawSolidPolygon(vertices, vertexCount, color);
            break;
        }
    }
}
/// Call this to draw shapes and other debug draw data.
const DrawDebugData_s_color = new b2Color(0, 0, 0);
const DrawDebugData_s_vs = b2Vec2.MakeArray(4);
const DrawDebugData_s_xf = new b2Transform();
export function drawDebugData(drawer, world) {
    const flags = drawer.GetFlags();
    const color = DrawDebugData_s_color.SetRGB(0, 0, 0);
    if (flags & 1 /* e_shapeBit */) {
        for (let b = world.m_bodyList; b; b = b.m_next) {
            const xf = b.m_xf;
            drawer.PushTransform(xf);
            for (let f = b.GetFixtureList(); f; f = f.m_next) {
                if (!b.IsActive()) {
                    color.SetRGB(0.5, 0.5, 0.3);
                    DrawShape(drawer, f, color);
                }
                else if (b.GetType() === 0 /* b2_staticBody */) {
                    color.SetRGB(0.5, 0.9, 0.5);
                    DrawShape(drawer, f, color);
                }
                else if (b.GetType() === 1 /* b2_kinematicBody */) {
                    color.SetRGB(0.5, 0.5, 0.9);
                    DrawShape(drawer, f, color);
                }
                else if (!b.IsAwake()) {
                    color.SetRGB(0.6, 0.6, 0.6);
                    DrawShape(drawer, f, color);
                }
                else {
                    color.SetRGB(0.9, 0.7, 0.7);
                    DrawShape(drawer, f, color);
                }
            }
            drawer.PopTransform(xf);
        }
    }
    if (!!B2_ENABLE_PARTICLE && flags & 32 /* e_particleBit */) {
        for (let p = world.m_particleSystemList; p; p = p.m_next) {
            DrawParticleSystem(drawer, p);
        }
    }
    if (flags & 2 /* e_jointBit */) {
        for (let j = world.m_jointList; j; j = j.m_next) {
            DrawJoint(drawer, j);
        }
    }
    /*
      if (flags & b2DrawFlags.e_pairBit) {
        color.SetRGB(0.3, 0.9, 0.9);
        for (let contact = this.m_contactManager.m_contactList; contact; contact = contact.m_next) {
          const fixtureA = contact.GetFixtureA();
          const fixtureB = contact.GetFixtureB();
  
          const cA = fixtureA.GetAABB().GetCenter();
          const cB = fixtureB.GetAABB().GetCenter();
  
          this.m_debugDraw.DrawSegment(cA, cB, color);
        }
      }
      */
    if (flags & 4 /* e_aabbBit */) {
        color.SetRGB(0.9, 0.3, 0.9);
        const vs = DrawDebugData_s_vs;
        for (let b = world.m_bodyList; b; b = b.m_next) {
            if (!b.IsActive()) {
                continue;
            }
            for (let f = b.GetFixtureList(); f; f = f.m_next) {
                for (let i = 0; i < f.m_proxyCount; ++i) {
                    const proxy = f.m_proxies[i];
                    const aabb = proxy.treeNode.aabb;
                    vs[0].Set(aabb.lowerBound.x, aabb.lowerBound.y);
                    vs[1].Set(aabb.upperBound.x, aabb.lowerBound.y);
                    vs[2].Set(aabb.upperBound.x, aabb.upperBound.y);
                    vs[3].Set(aabb.lowerBound.x, aabb.upperBound.y);
                    drawer.DrawPolygon(vs, 4, color);
                }
            }
        }
    }
    if (flags & 16 /* e_centerOfMassBit */) {
        for (let b = world.m_bodyList; b; b = b.m_next) {
            const xf = DrawDebugData_s_xf;
            xf.q.Copy(b.m_xf.q);
            xf.p.Copy(b.GetWorldCenter());
            drawer.DrawTransform(xf);
        }
    }
    // @see b2Controller list
    if (B2_ENABLE_CONTROLLER) {
        if (flags & 64 /* e_controllerBit */) {
            for (let c = world.m_controllerList; c; c = c.m_next) {
                c.Draw(drawer);
            }
        }
    }
}
//# sourceMappingURL=data:application/json;base64,