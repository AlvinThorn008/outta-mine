function DumpDistanceJoint(joint, log) {
    const indexA = joint.m_bodyA.m_islandIndex;
    const indexB = joint.m_bodyB.m_islandIndex;
    log('  const jd: b2DistanceJointDef = new b2DistanceJointDef();\n');
    log('  jd.bodyA = bodies[%d];\n', indexA);
    log('  jd.bodyB = bodies[%d];\n', indexB);
    log('  jd.collideConnected = %s;\n', joint.m_collideConnected ? 'true' : 'false');
    log('  jd.localAnchorA.Set(%.15f, %.15f);\n', joint.m_localAnchorA.x, joint.m_localAnchorA.y);
    log('  jd.localAnchorB.Set(%.15f, %.15f);\n', joint.m_localAnchorB.x, joint.m_localAnchorB.y);
    log('  jd.length = %.15f;\n', joint.m_length);
    log('  jd.frequencyHz = %.15f;\n', joint.m_frequencyHz);
    log('  jd.dampingRatio = %.15f;\n', joint.m_dampingRatio);
    log('  joints[%d] = this.m_world.CreateJoint(jd);\n', joint._logIndex);
}
function DumpFrictionJoint(joint, log) {
    const indexA = joint.m_bodyA.m_islandIndex;
    const indexB = joint.m_bodyB.m_islandIndex;
    log('  const jd: b2FrictionJointDef = new b2FrictionJointDef();\n');
    log('  jd.bodyA = bodies[%d];\n', indexA);
    log('  jd.bodyB = bodies[%d];\n', indexB);
    log('  jd.collideConnected = %s;\n', joint.m_collideConnected ? 'true' : 'false');
    log('  jd.localAnchorA.Set(%.15f, %.15f);\n', joint.m_localAnchorA.x, joint.m_localAnchorA.y);
    log('  jd.localAnchorB.Set(%.15f, %.15f);\n', joint.m_localAnchorB.x, joint.m_localAnchorB.y);
    log('  jd.maxForce = %.15f;\n', joint.m_maxForce);
    log('  jd.maxTorque = %.15f;\n', joint.m_maxTorque);
    log('  joints[%d] = this.m_world.CreateJoint(jd);\n', joint._logIndex);
}
function DumpMotorJoint(joint, log) {
    const indexA = joint.m_bodyA.m_islandIndex;
    const indexB = joint.m_bodyB.m_islandIndex;
    log('  const jd: b2MotorJointDef = new b2MotorJointDef();\n');
    log('  jd.bodyA = bodies[%d];\n', indexA);
    log('  jd.bodyB = bodies[%d];\n', indexB);
    log('  jd.collideConnected = %s;\n', joint.m_collideConnected ? 'true' : 'false');
    log('  jd.linearOffset.Set(%.15f, %.15f);\n', joint.m_linearOffset.x, joint.m_linearOffset.y);
    log('  jd.angularOffset = %.15f;\n', joint.m_angularOffset);
    log('  jd.maxForce = %.15f;\n', joint.m_maxForce);
    log('  jd.maxTorque = %.15f;\n', joint.m_maxTorque);
    log('  jd.correctionFactor = %.15f;\n', joint.m_correctionFactor);
    log('  joints[%d] = this.m_world.CreateJoint(jd);\n', joint._logIndex);
}
function DumpPrismaticJoint(joint, log) {
    const indexA = joint.m_bodyA.m_islandIndex;
    const indexB = joint.m_bodyB.m_islandIndex;
    log('  const jd: b2PrismaticJointDef = new b2PrismaticJointDef();\n');
    log('  jd.bodyA = bodies[%d];\n', indexA);
    log('  jd.bodyB = bodies[%d];\n', indexB);
    log('  jd.collideConnected = %s;\n', joint.m_collideConnected ? 'true' : 'false');
    log('  jd.localAnchorA.Set(%.15f, %.15f);\n', joint.m_localAnchorA.x, joint.m_localAnchorA.y);
    log('  jd.localAnchorB.Set(%.15f, %.15f);\n', joint.m_localAnchorB.x, joint.m_localAnchorB.y);
    log('  jd.localAxisA.Set(%.15f, %.15f);\n', joint.m_localXAxisA.x, joint.m_localXAxisA.y);
    log('  jd.referenceAngle = %.15f;\n', joint.m_referenceAngle);
    log('  jd.enableLimit = %s;\n', joint.m_enableLimit ? 'true' : 'false');
    log('  jd.lowerTranslation = %.15f;\n', joint.m_lowerTranslation);
    log('  jd.upperTranslation = %.15f;\n', joint.m_upperTranslation);
    log('  jd.enableMotor = %s;\n', joint.m_enableMotor ? 'true' : 'false');
    log('  jd.motorSpeed = %.15f;\n', joint.m_motorSpeed);
    log('  jd.maxMotorForce = %.15f;\n', joint.m_maxMotorForce);
    log('  joints[%d] = this.m_world.CreateJoint(jd);\n', joint._logIndex);
}
function DumpPulleyJoint(joint, log) {
    const indexA = joint.m_bodyA.m_islandIndex;
    const indexB = joint.m_bodyB.m_islandIndex;
    log('  const jd: b2PulleyJointDef = new b2PulleyJointDef();\n');
    log('  jd.bodyA = bodies[%d];\n', indexA);
    log('  jd.bodyB = bodies[%d];\n', indexB);
    log('  jd.collideConnected = %s;\n', joint.m_collideConnected ? 'true' : 'false');
    log('  jd.groundAnchorA.Set(%.15f, %.15f);\n', joint.m_groundAnchorA.x, joint.m_groundAnchorA.y);
    log('  jd.groundAnchorB.Set(%.15f, %.15f);\n', joint.m_groundAnchorB.x, joint.m_groundAnchorB.y);
    log('  jd.localAnchorA.Set(%.15f, %.15f);\n', joint.m_localAnchorA.x, joint.m_localAnchorA.y);
    log('  jd.localAnchorB.Set(%.15f, %.15f);\n', joint.m_localAnchorB.x, joint.m_localAnchorB.y);
    log('  jd.lengthA = %.15f;\n', joint.m_lengthA);
    log('  jd.lengthB = %.15f;\n', joint.m_lengthB);
    log('  jd.ratio = %.15f;\n', joint.m_ratio);
    log('  joints[%d] = this.m_world.CreateJoint(jd);\n', joint._logIndex);
}
function DumpRevoluteJoint(joint, log) {
    const indexA = joint.m_bodyA.m_islandIndex;
    const indexB = joint.m_bodyB.m_islandIndex;
    log('  const jd: b2RevoluteJointDef = new b2RevoluteJointDef();\n');
    log('  jd.bodyA = bodies[%d];\n', indexA);
    log('  jd.bodyB = bodies[%d];\n', indexB);
    log('  jd.collideConnected = %s;\n', joint.m_collideConnected ? 'true' : 'false');
    log('  jd.localAnchorA.Set(%.15f, %.15f);\n', joint.m_localAnchorA.x, joint.m_localAnchorA.y);
    log('  jd.localAnchorB.Set(%.15f, %.15f);\n', joint.m_localAnchorB.x, joint.m_localAnchorB.y);
    log('  jd.referenceAngle = %.15f;\n', joint.m_referenceAngle);
    log('  jd.enableLimit = %s;\n', joint.m_enableLimit ? 'true' : 'false');
    log('  jd.lowerAngle = %.15f;\n', joint.m_lowerAngle);
    log('  jd.upperAngle = %.15f;\n', joint.m_upperAngle);
    log('  jd.enableMotor = %s;\n', joint.m_enableMotor ? 'true' : 'false');
    log('  jd.motorSpeed = %.15f;\n', joint.m_motorSpeed);
    log('  jd.maxMotorTorque = %.15f;\n', joint.m_maxMotorTorque);
    log('  joints[%d] = this.m_world.CreateJoint(jd);\n', joint._logIndex);
}
function DumpRopeJoint(joint, log) {
    const indexA = joint.m_bodyA.m_islandIndex;
    const indexB = joint.m_bodyB.m_islandIndex;
    log('  const jd: b2RopeJointDef = new b2RopeJointDef();\n');
    log('  jd.bodyA = bodies[%d];\n', indexA);
    log('  jd.bodyB = bodies[%d];\n', indexB);
    log('  jd.collideConnected = %s;\n', joint.m_collideConnected ? 'true' : 'false');
    log('  jd.localAnchorA.Set(%.15f, %.15f);\n', joint.m_localAnchorA.x, joint.m_localAnchorA.y);
    log('  jd.localAnchorB.Set(%.15f, %.15f);\n', joint.m_localAnchorB.x, joint.m_localAnchorB.y);
    log('  jd.maxLength = %.15f;\n', joint.m_maxLength);
    log('  joints[%d] = this.m_world.CreateJoint(jd);\n', joint._logIndex);
}
function DumpWeldJoint(joint, log) {
    const indexA = joint.m_bodyA.m_islandIndex;
    const indexB = joint.m_bodyB.m_islandIndex;
    log('  const jd: b2WeldJointDef = new b2WeldJointDef();\n');
    log('  jd.bodyA = bodies[%d];\n', indexA);
    log('  jd.bodyB = bodies[%d];\n', indexB);
    log('  jd.collideConnected = %s;\n', joint.m_collideConnected ? 'true' : 'false');
    log('  jd.localAnchorA.Set(%.15f, %.15f);\n', joint.m_localAnchorA.x, joint.m_localAnchorA.y);
    log('  jd.localAnchorB.Set(%.15f, %.15f);\n', joint.m_localAnchorB.x, joint.m_localAnchorB.y);
    log('  jd.referenceAngle = %.15f;\n', joint.m_referenceAngle);
    log('  jd.frequencyHz = %.15f;\n', joint.m_frequencyHz);
    log('  jd.dampingRatio = %.15f;\n', joint.m_dampingRatio);
    log('  joints[%d] = this.m_world.CreateJoint(jd);\n', joint._logIndex);
}
function DumpWheelJoint(joint, log) {
    const indexA = joint.m_bodyA.m_islandIndex;
    const indexB = joint.m_bodyB.m_islandIndex;
    log('  const jd: b2WheelJointDef = new b2WheelJointDef();\n');
    log('  jd.bodyA = bodies[%d];\n', indexA);
    log('  jd.bodyB = bodies[%d];\n', indexB);
    log('  jd.collideConnected = %s;\n', joint.m_collideConnected ? 'true' : 'false');
    log('  jd.localAnchorA.Set(%.15f, %.15f);\n', joint.m_localAnchorA.x, joint.m_localAnchorA.y);
    log('  jd.localAnchorB.Set(%.15f, %.15f);\n', joint.m_localAnchorB.x, joint.m_localAnchorB.y);
    log('  jd.localAxisA.Set(%.15f, %.15f);\n', joint.m_localXAxisA.x, joint.m_localXAxisA.y);
    log('  jd.enableMotor = %s;\n', joint.m_enableMotor ? 'true' : 'false');
    log('  jd.motorSpeed = %.15f;\n', joint.m_motorSpeed);
    log('  jd.maxMotorTorque = %.15f;\n', joint.m_maxMotorTorque);
    log('  jd.frequencyHz = %.15f;\n', joint.m_frequencyHz);
    log('  jd.dampingRatio = %.15f;\n', joint.m_dampingRatio);
    log('  joints[%d] = this.m_world.CreateJoint(jd);\n', joint._logIndex);
}
export function DumpGearJoint(joint, log) {
    const j = joint;
    const indexA = j.m_bodyA.m_islandIndex;
    const indexB = j.m_bodyB.m_islandIndex;
    const index1 = j.m_joint1._logIndex;
    const index2 = j.m_joint2._logIndex;
    log('  const jd: b2GearJointDef = new b2GearJointDef();\n');
    log('  jd.bodyA = bodies[%d];\n', indexA);
    log('  jd.bodyB = bodies[%d];\n', indexB);
    log('  jd.collideConnected = %s;\n', j.m_collideConnected ? 'true' : 'false');
    log('  jd.joint1 = joints[%d];\n', index1);
    log('  jd.joint2 = joints[%d];\n', index2);
    log('  jd.ratio = %.15f;\n', j.m_ratio);
    log('  joints[%d] = this.m_world.CreateJoint(jd);\n', joint._logIndex);
}
/// Dump this joint to the log file.
export function DumpJoint(joint, log) {
    if (joint.m_type === 6 /* e_gearJoint */) {
        DumpGearJoint(joint, log);
    }
    else if (joint.m_type === 3 /* e_distanceJoint */) {
        DumpDistanceJoint(joint, log);
    }
    else if (joint.m_type === 9 /* e_frictionJoint */) {
        DumpFrictionJoint(joint, log);
    }
    else if (joint.m_type === 11 /* e_motorJoint */) {
        DumpMotorJoint(joint, log);
    }
    else if (joint.m_type === 2 /* e_prismaticJoint */) {
        DumpPrismaticJoint(joint, log);
    }
    else if (joint.m_type === 4 /* e_pulleyJoint */) {
        DumpPulleyJoint(joint, log);
    }
    else if (joint.m_type === 1 /* e_revoluteJoint */) {
        DumpRevoluteJoint(joint, log);
    }
    else if (joint.m_type === 10 /* e_ropeJoint */) {
        DumpRopeJoint(joint, log);
    }
    else if (joint.m_type === 8 /* e_weldJoint */) {
        DumpWeldJoint(joint, log);
    }
    else if (joint.m_type === 7 /* e_wheelJoint */) {
        DumpWheelJoint(joint, log);
    }
    else {
        log('// Dump is not supported for this joint type.\n');
    }
}
//# sourceMappingURL=data:application/json;base64,