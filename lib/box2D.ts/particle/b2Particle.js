/*
 * Copyright (c) 2013 Google, Inc.
 *
 * This software is provided 'as-is', without any express or implied
 * warranty.  In no event will the authors be held liable for any damages
 * arising from the use of this software.
 * Permission is granted to anyone to use this software for any purpose,
 * including commercial applications, and to alter it and redistribute it
 * freely, subject to the following restrictions:
 * 1. The origin of this software must not be misrepresented; you must not
 * claim that you wrote the original software. If you use this software
 * in a product, an acknowledgment in the product documentation would be
 * appreciated but is not required.
 * 2. Altered source versions must be plainly marked as such, and must not be
 * misrepresented as being the original software.
 * 3. This notice may not be removed or altered from any source distribution.
 */
import { b2_invalidParticleIndex } from '../common/b2SettingsParticleSystem';
import { b2ClampInt, b2Vec2 } from '../common/b2Math';
import { b2Color } from '../common/b2Draw';
export class b2ParticleDef {
    constructor() {
        this.flags = 0 /* none */;
        this.position = new b2Vec2();
        this.velocity = new b2Vec2();
        this.color = new b2Color(0, 0, 0, 0);
        this.lifetime = NaN;
        this.userData = null;
        this.group = null;
        this.lifetime = 0.0;
    }
}
export function b2CalculateParticleIterations(gravity, radius, timeStep) {
    // In some situations you may want more particle iterations than this,
    // but to avoid excessive cycle cost, don't recommend more than this.
    const B2_MAX_RECOMMENDED_PARTICLE_ITERATIONS = 8;
    const B2_RADIUS_THRESHOLD = 0.01;
    const iterations = Math.ceil(Math.sqrt(gravity / (B2_RADIUS_THRESHOLD * radius)) * timeStep);
    return b2ClampInt(iterations, 1, B2_MAX_RECOMMENDED_PARTICLE_ITERATIONS);
}
export class b2ParticleHandle {
    constructor() {
        this.index = b2_invalidParticleIndex;
    }
    GetIndex() {
        return this.index;
    }
    SetIndex(index) {
        this.index = index;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYjJQYXJ0aWNsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9wYXJ0aWNsZS9iMlBhcnRpY2xlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7O0dBZ0JHO0FBRUgsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sb0NBQW9DLENBQUM7QUFDN0UsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQU0sTUFBTSxrQkFBa0IsQ0FBQztBQUMxRCxPQUFPLEVBQUUsT0FBTyxFQUFRLE1BQU0sa0JBQWtCLENBQUM7QUFpRWpELE1BQU0sT0FBTyxhQUFhO0lBU3hCO1FBUkEsVUFBSyxnQkFBdUI7UUFDbkIsYUFBUSxHQUFHLElBQUksTUFBTSxFQUFFLENBQUM7UUFDeEIsYUFBUSxHQUFHLElBQUksTUFBTSxFQUFFLENBQUM7UUFDeEIsVUFBSyxHQUFHLElBQUksT0FBTyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ3pDLGFBQVEsR0FBRyxHQUFHLENBQUM7UUFDZixhQUFRLEdBQVEsSUFBSSxDQUFDO1FBQ3JCLFVBQUssR0FBMkIsSUFBSSxDQUFDO1FBR25DLElBQUksQ0FBQyxRQUFRLEdBQUcsR0FBRyxDQUFDO0lBQ3RCLENBQUM7Q0FDRjtBQUVELE1BQU0sVUFBVSw2QkFBNkIsQ0FDM0MsT0FBZSxFQUNmLE1BQWMsRUFDZCxRQUFnQjtJQUVoQixzRUFBc0U7SUFDdEUscUVBQXFFO0lBQ3JFLE1BQU0sc0NBQXNDLEdBQUcsQ0FBQyxDQUFDO0lBQ2pELE1BQU0sbUJBQW1CLEdBQUcsSUFBSSxDQUFDO0lBQ2pDLE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEdBQUcsQ0FBQyxtQkFBbUIsR0FBRyxNQUFNLENBQUMsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxDQUFDO0lBQzdGLE9BQU8sVUFBVSxDQUFDLFVBQVUsRUFBRSxDQUFDLEVBQUUsc0NBQXNDLENBQUMsQ0FBQztBQUMzRSxDQUFDO0FBRUQsTUFBTSxPQUFPLGdCQUFnQjtJQUE3QjtRQUNFLFVBQUssR0FBRyx1QkFBdUIsQ0FBQztJQVNsQyxDQUFDO0lBUEMsUUFBUTtRQUNOLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQztJQUNwQixDQUFDO0lBRUQsUUFBUSxDQUFDLEtBQWE7UUFDcEIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7SUFDckIsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiLypcclxuICogQ29weXJpZ2h0IChjKSAyMDEzIEdvb2dsZSwgSW5jLlxyXG4gKlxyXG4gKiBUaGlzIHNvZnR3YXJlIGlzIHByb3ZpZGVkICdhcy1pcycsIHdpdGhvdXQgYW55IGV4cHJlc3Mgb3IgaW1wbGllZFxyXG4gKiB3YXJyYW50eS4gIEluIG5vIGV2ZW50IHdpbGwgdGhlIGF1dGhvcnMgYmUgaGVsZCBsaWFibGUgZm9yIGFueSBkYW1hZ2VzXHJcbiAqIGFyaXNpbmcgZnJvbSB0aGUgdXNlIG9mIHRoaXMgc29mdHdhcmUuXHJcbiAqIFBlcm1pc3Npb24gaXMgZ3JhbnRlZCB0byBhbnlvbmUgdG8gdXNlIHRoaXMgc29mdHdhcmUgZm9yIGFueSBwdXJwb3NlLFxyXG4gKiBpbmNsdWRpbmcgY29tbWVyY2lhbCBhcHBsaWNhdGlvbnMsIGFuZCB0byBhbHRlciBpdCBhbmQgcmVkaXN0cmlidXRlIGl0XHJcbiAqIGZyZWVseSwgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIHJlc3RyaWN0aW9uczpcclxuICogMS4gVGhlIG9yaWdpbiBvZiB0aGlzIHNvZnR3YXJlIG11c3Qgbm90IGJlIG1pc3JlcHJlc2VudGVkOyB5b3UgbXVzdCBub3RcclxuICogY2xhaW0gdGhhdCB5b3Ugd3JvdGUgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLiBJZiB5b3UgdXNlIHRoaXMgc29mdHdhcmVcclxuICogaW4gYSBwcm9kdWN0LCBhbiBhY2tub3dsZWRnbWVudCBpbiB0aGUgcHJvZHVjdCBkb2N1bWVudGF0aW9uIHdvdWxkIGJlXHJcbiAqIGFwcHJlY2lhdGVkIGJ1dCBpcyBub3QgcmVxdWlyZWQuXHJcbiAqIDIuIEFsdGVyZWQgc291cmNlIHZlcnNpb25zIG11c3QgYmUgcGxhaW5seSBtYXJrZWQgYXMgc3VjaCwgYW5kIG11c3Qgbm90IGJlXHJcbiAqIG1pc3JlcHJlc2VudGVkIGFzIGJlaW5nIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS5cclxuICogMy4gVGhpcyBub3RpY2UgbWF5IG5vdCBiZSByZW1vdmVkIG9yIGFsdGVyZWQgZnJvbSBhbnkgc291cmNlIGRpc3RyaWJ1dGlvbi5cclxuICovXHJcblxyXG5pbXBvcnQgeyBiMl9pbnZhbGlkUGFydGljbGVJbmRleCB9IGZyb20gJy4uL2NvbW1vbi9iMlNldHRpbmdzUGFydGljbGVTeXN0ZW0nO1xyXG5pbXBvcnQgeyBiMkNsYW1wSW50LCBiMlZlYzIsIFhZIH0gZnJvbSAnLi4vY29tbW9uL2IyTWF0aCc7XHJcbmltcG9ydCB7IGIyQ29sb3IsIFJHQkEgfSBmcm9tICcuLi9jb21tb24vYjJEcmF3JztcclxuaW1wb3J0IHsgYjJQYXJ0aWNsZUdyb3VwIH0gZnJvbSAnLi9iMlBhcnRpY2xlR3JvdXAnO1xyXG5cclxuLyoqXHJcbiAqIFRoZSBwYXJ0aWNsZSB0eXBlLiBDYW4gYmUgY29tYmluZWQgd2l0aCB0aGUgfCBvcGVyYXRvci5cclxuICovXHJcbmV4cG9ydCBjb25zdCBlbnVtIGIyUGFydGljbGVGbGFnIHtcclxuICBub25lID0gMCxcclxuICAvLy8gV2F0ZXIgcGFydGljbGUuXHJcbiAgYjJfd2F0ZXJQYXJ0aWNsZSA9IDEgPDwgMCxcclxuICAvLy8gUmVtb3ZlZCBhZnRlciBuZXh0IHNpbXVsYXRpb24gc3RlcC5cclxuICBiMl96b21iaWVQYXJ0aWNsZSA9IDEgPDwgMSxcclxuICAvLy8gWmVybyB2ZWxvY2l0eS5cclxuICBiMl93YWxsUGFydGljbGUgPSAxIDw8IDIsXHJcbiAgLy8vIFdpdGggcmVzdGl0dXRpb24gZnJvbSBzdHJldGNoaW5nLlxyXG4gIGIyX3NwcmluZ1BhcnRpY2xlID0gMSA8PCAzLFxyXG4gIC8vLyBXaXRoIHJlc3RpdHV0aW9uIGZyb20gZGVmb3JtYXRpb24uXHJcbiAgYjJfZWxhc3RpY1BhcnRpY2xlID0gMSA8PCA0LFxyXG4gIC8vLyBXaXRoIHZpc2Nvc2l0eS5cclxuICBiMl92aXNjb3VzUGFydGljbGUgPSAxIDw8IDUsXHJcbiAgLy8vIFdpdGhvdXQgaXNvdHJvcGljIHByZXNzdXJlLlxyXG4gIGIyX3Bvd2RlclBhcnRpY2xlID0gMSA8PCA2LFxyXG4gIC8vLyBXaXRoIHN1cmZhY2UgdGVuc2lvbi5cclxuICBiMl90ZW5zaWxlUGFydGljbGUgPSAxIDw8IDcsXHJcbiAgLy8vIE1peCBjb2xvciBiZXR3ZWVuIGNvbnRhY3RpbmcgcGFydGljbGVzLlxyXG4gIGIyX2NvbG9yTWl4aW5nUGFydGljbGUgPSAxIDw8IDgsXHJcbiAgLy8vIENhbGwgYjJEZXN0cnVjdGlvbkxpc3RlbmVyIG9uIGRlc3RydWN0aW9uLlxyXG4gIGIyX2Rlc3RydWN0aW9uTGlzdGVuZXJQYXJ0aWNsZSA9IDEgPDwgOSxcclxuICAvLy8gUHJldmVudHMgb3RoZXIgcGFydGljbGVzIGZyb20gbGVha2luZy5cclxuICBiMl9iYXJyaWVyUGFydGljbGUgPSAxIDw8IDEwLFxyXG4gIC8vLyBMZXNzIGNvbXByZXNzaWJpbGl0eS5cclxuICBiMl9zdGF0aWNQcmVzc3VyZVBhcnRpY2xlID0gMSA8PCAxMSxcclxuICAvLy8gTWFrZXMgcGFpcnMgb3IgdHJpYWRzIHdpdGggb3RoZXIgcGFydGljbGVzLlxyXG4gIGIyX3JlYWN0aXZlUGFydGljbGUgPSAxIDw8IDEyLFxyXG4gIC8vLyBXaXRoIGhpZ2ggcmVwdWxzaXZlIGZvcmNlLlxyXG4gIGIyX3JlcHVsc2l2ZVBhcnRpY2xlID0gMSA8PCAxMyxcclxuICAvLy8gQ2FsbCBiMkNvbnRhY3RMaXN0ZW5lciB3aGVuIHRoaXMgcGFydGljbGUgaXMgYWJvdXQgdG8gaW50ZXJhY3Qgd2l0aFxyXG4gIC8vLyBhIHJpZ2lkIGJvZHkgb3Igc3RvcHMgaW50ZXJhY3Rpbmcgd2l0aCBhIHJpZ2lkIGJvZHkuXHJcbiAgLy8vIFRoaXMgcmVzdWx0cyBpbiBhbiBleHBlbnNpdmUgb3BlcmF0aW9uIGNvbXBhcmVkIHRvIHVzaW5nXHJcbiAgLy8vIGIyX2ZpeHR1cmVDb250YWN0RmlsdGVyUGFydGljbGUgdG8gZGV0ZWN0IGNvbGxpc2lvbnMgYmV0d2VlblxyXG4gIC8vLyBwYXJ0aWNsZXMuXHJcbiAgYjJfZml4dHVyZUNvbnRhY3RMaXN0ZW5lclBhcnRpY2xlID0gMSA8PCAxNCxcclxuICAvLy8gQ2FsbCBiMkNvbnRhY3RMaXN0ZW5lciB3aGVuIHRoaXMgcGFydGljbGUgaXMgYWJvdXQgdG8gaW50ZXJhY3Qgd2l0aFxyXG4gIC8vLyBhbm90aGVyIHBhcnRpY2xlIG9yIHN0b3BzIGludGVyYWN0aW5nIHdpdGggYW5vdGhlciBwYXJ0aWNsZS5cclxuICAvLy8gVGhpcyByZXN1bHRzIGluIGFuIGV4cGVuc2l2ZSBvcGVyYXRpb24gY29tcGFyZWQgdG8gdXNpbmdcclxuICAvLy8gYjJfcGFydGljbGVDb250YWN0RmlsdGVyUGFydGljbGUgdG8gZGV0ZWN0IGNvbGxpc2lvbnMgYmV0d2VlblxyXG4gIC8vLyBwYXJ0aWNsZXMuXHJcbiAgYjJfcGFydGljbGVDb250YWN0TGlzdGVuZXJQYXJ0aWNsZSA9IDEgPDwgMTUsXHJcbiAgLy8vIENhbGwgYjJDb250YWN0RmlsdGVyIHdoZW4gdGhpcyBwYXJ0aWNsZSBpbnRlcmFjdHMgd2l0aCByaWdpZCBib2RpZXMuXHJcbiAgYjJfZml4dHVyZUNvbnRhY3RGaWx0ZXJQYXJ0aWNsZSA9IDEgPDwgMTYsXHJcbiAgLy8vIENhbGwgYjJDb250YWN0RmlsdGVyIHdoZW4gdGhpcyBwYXJ0aWNsZSBpbnRlcmFjdHMgd2l0aCBvdGhlclxyXG4gIC8vLyBwYXJ0aWNsZXMuXHJcbiAgYjJfcGFydGljbGVDb250YWN0RmlsdGVyUGFydGljbGUgPSAxIDw8IDE3LFxyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIGIySVBhcnRpY2xlRGVmIHtcclxuICBmbGFncz86IGIyUGFydGljbGVGbGFnO1xyXG4gIHBvc2l0aW9uPzogWFk7XHJcbiAgdmVsb2NpdHk/OiBYWTtcclxuICBjb2xvcj86IFJHQkE7XHJcbiAgbGlmZXRpbWU/OiBudW1iZXI7XHJcbiAgdXNlckRhdGE/OiBhbnk7XHJcbiAgZ3JvdXA/OiBiMlBhcnRpY2xlR3JvdXAgfCBudWxsO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgYjJQYXJ0aWNsZURlZiBpbXBsZW1lbnRzIGIySVBhcnRpY2xlRGVmIHtcclxuICBmbGFncyA9IGIyUGFydGljbGVGbGFnLm5vbmU7XHJcbiAgcmVhZG9ubHkgcG9zaXRpb24gPSBuZXcgYjJWZWMyKCk7XHJcbiAgcmVhZG9ubHkgdmVsb2NpdHkgPSBuZXcgYjJWZWMyKCk7XHJcbiAgcmVhZG9ubHkgY29sb3IgPSBuZXcgYjJDb2xvcigwLCAwLCAwLCAwKTtcclxuICBsaWZldGltZSA9IE5hTjtcclxuICB1c2VyRGF0YTogYW55ID0gbnVsbDtcclxuICBncm91cDogYjJQYXJ0aWNsZUdyb3VwIHwgbnVsbCA9IG51bGw7XHJcblxyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgdGhpcy5saWZldGltZSA9IDAuMDtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBiMkNhbGN1bGF0ZVBhcnRpY2xlSXRlcmF0aW9ucyhcclxuICBncmF2aXR5OiBudW1iZXIsXHJcbiAgcmFkaXVzOiBudW1iZXIsXHJcbiAgdGltZVN0ZXA6IG51bWJlcixcclxuKTogbnVtYmVyIHtcclxuICAvLyBJbiBzb21lIHNpdHVhdGlvbnMgeW91IG1heSB3YW50IG1vcmUgcGFydGljbGUgaXRlcmF0aW9ucyB0aGFuIHRoaXMsXHJcbiAgLy8gYnV0IHRvIGF2b2lkIGV4Y2Vzc2l2ZSBjeWNsZSBjb3N0LCBkb24ndCByZWNvbW1lbmQgbW9yZSB0aGFuIHRoaXMuXHJcbiAgY29uc3QgQjJfTUFYX1JFQ09NTUVOREVEX1BBUlRJQ0xFX0lURVJBVElPTlMgPSA4O1xyXG4gIGNvbnN0IEIyX1JBRElVU19USFJFU0hPTEQgPSAwLjAxO1xyXG4gIGNvbnN0IGl0ZXJhdGlvbnMgPSBNYXRoLmNlaWwoTWF0aC5zcXJ0KGdyYXZpdHkgLyAoQjJfUkFESVVTX1RIUkVTSE9MRCAqIHJhZGl1cykpICogdGltZVN0ZXApO1xyXG4gIHJldHVybiBiMkNsYW1wSW50KGl0ZXJhdGlvbnMsIDEsIEIyX01BWF9SRUNPTU1FTkRFRF9QQVJUSUNMRV9JVEVSQVRJT05TKTtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIGIyUGFydGljbGVIYW5kbGUge1xyXG4gIGluZGV4ID0gYjJfaW52YWxpZFBhcnRpY2xlSW5kZXg7XHJcblxyXG4gIEdldEluZGV4KCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5pbmRleDtcclxuICB9XHJcblxyXG4gIFNldEluZGV4KGluZGV4OiBudW1iZXIpOiB2b2lkIHtcclxuICAgIHRoaXMuaW5kZXggPSBpbmRleDtcclxuICB9XHJcbn1cclxuIl19