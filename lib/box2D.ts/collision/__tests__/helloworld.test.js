import { b2BodyDef, b2FixtureDef, b2PolygonShape, b2Vec2, b2World } from '../..';
test('hello world', () => {
    // Define the gravity vector.
    const gravity = new b2Vec2(0, -10);
    // Construct a world object, which will hold and simulate the rigid bodies.
    const world = new b2World(gravity);
    // Define the ground body.
    const groundBodyDef = new b2BodyDef();
    groundBodyDef.position.Set(0, -10);
    // Call the body factory which allocates memory for the ground body
    // from a pool and creates the ground box shape (also from a pool).
    // The body is also added to the world.
    const groundBody = world.CreateBody(groundBodyDef);
    // Define the ground box shape.
    const groundBox = new b2PolygonShape();
    // The extents are the half-widths of the box.
    groundBox.SetAsBox(50.0, 10.0);
    // Add the ground fixture to the ground body.
    groundBody.CreateFixture(groundBox, 0.0);
    // Define the dynamic body. We set its position and call the body factory.
    const bodyDef = new b2BodyDef();
    bodyDef.type = 2 /* b2_dynamicBody */;
    bodyDef.position.Set(0.0, 4.0);
    const body = world.CreateBody(bodyDef);
    // Define another box shape for our dynamic body.
    const dynamicBox = new b2PolygonShape();
    dynamicBox.SetAsBox(1.0, 1.0);
    // Define the dynamic body fixture.
    const fixtureDef = new b2FixtureDef();
    fixtureDef.shape = dynamicBox;
    // Set the box density to be non-zero, so it will be dynamic.
    fixtureDef.density = 1.0;
    // Override the default friction.
    fixtureDef.friction = 0.3;
    // Add the shape to the body.
    body.CreateFixture(fixtureDef);
    // Prepare for simulation. Typically we use a time step of 1/60 of a
    // second (60Hz) and 10 iterations. This provides a high quality simulation
    // in most game scenarios.
    const timeStep = 1.0 / 60.0;
    const velocityIterations = 6;
    const positionIterations = 2;
    let position = body.GetPosition();
    let angle = body.GetAngle();
    // This is our little game loop.
    for (let i = 0; i < 60; ++i) {
        // Instruct the world to perform a single step of simulation.
        // It is generally best to keep the time step and iterations fixed.
        world.Step(timeStep, velocityIterations, positionIterations);
        // Now print the position and angle of the body.
        position = body.GetPosition();
        angle = body.GetAngle();
        // printf("%4.2f %4.2f %4.2f\n", position.x, position.y, angle);
    }
    // When the world destructor is called, all bodies and joints are freed. This can
    // create orphaned pointers, so be careful about your world management.
    expect(position.x).toBeCloseTo(0.0);
    // TODO:
    expect(position.y).toBeCloseTo(1.0, 1);
    expect(angle).toBeCloseTo(0.0);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVsbG93b3JsZC50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbGxpc2lvbi9fX3Rlc3RzX18vaGVsbG93b3JsZC50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQWMsWUFBWSxFQUFFLGNBQWMsRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLE1BQU0sT0FBTyxDQUFDO0FBRTdGLElBQUksQ0FBQyxhQUFhLEVBQUUsR0FBRyxFQUFFO0lBQ3ZCLDZCQUE2QjtJQUM3QixNQUFNLE9BQU8sR0FBRyxJQUFJLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUVuQywyRUFBMkU7SUFDM0UsTUFBTSxLQUFLLEdBQUcsSUFBSSxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7SUFFbkMsMEJBQTBCO0lBQzFCLE1BQU0sYUFBYSxHQUFHLElBQUksU0FBUyxFQUFFLENBQUM7SUFDdEMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7SUFFbkMsbUVBQW1FO0lBQ25FLG1FQUFtRTtJQUNuRSx1Q0FBdUM7SUFDdkMsTUFBTSxVQUFVLEdBQUcsS0FBSyxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUVuRCwrQkFBK0I7SUFDL0IsTUFBTSxTQUFTLEdBQUcsSUFBSSxjQUFjLEVBQUUsQ0FBQztJQUV2Qyw4Q0FBOEM7SUFDOUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFFL0IsNkNBQTZDO0lBQzdDLFVBQVUsQ0FBQyxhQUFhLENBQUMsU0FBUyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBRXpDLDBFQUEwRTtJQUMxRSxNQUFNLE9BQU8sR0FBRyxJQUFJLFNBQVMsRUFBRSxDQUFDO0lBQ2hDLE9BQU8sQ0FBQyxJQUFJLHlCQUE0QixDQUFDO0lBQ3pDLE9BQU8sQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztJQUMvQixNQUFNLElBQUksR0FBRyxLQUFLLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBRXZDLGlEQUFpRDtJQUNqRCxNQUFNLFVBQVUsR0FBRyxJQUFJLGNBQWMsRUFBRSxDQUFDO0lBQ3hDLFVBQVUsQ0FBQyxRQUFRLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBRTlCLG1DQUFtQztJQUNuQyxNQUFNLFVBQVUsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO0lBQ3RDLFVBQVUsQ0FBQyxLQUFLLEdBQUcsVUFBVSxDQUFDO0lBRTlCLDZEQUE2RDtJQUM3RCxVQUFVLENBQUMsT0FBTyxHQUFHLEdBQUcsQ0FBQztJQUV6QixpQ0FBaUM7SUFDakMsVUFBVSxDQUFDLFFBQVEsR0FBRyxHQUFHLENBQUM7SUFFMUIsNkJBQTZCO0lBQzdCLElBQUksQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDLENBQUM7SUFFL0Isb0VBQW9FO0lBQ3BFLDJFQUEyRTtJQUMzRSwwQkFBMEI7SUFDMUIsTUFBTSxRQUFRLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQztJQUM1QixNQUFNLGtCQUFrQixHQUFHLENBQUMsQ0FBQztJQUM3QixNQUFNLGtCQUFrQixHQUFHLENBQUMsQ0FBQztJQUU3QixJQUFJLFFBQVEsR0FBRyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDbEMsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBRTVCLGdDQUFnQztJQUNoQyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFO1FBQzNCLDZEQUE2RDtRQUM3RCxtRUFBbUU7UUFDbkUsS0FBSyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsa0JBQWtCLEVBQUUsa0JBQWtCLENBQUMsQ0FBQztRQUU3RCxnREFBZ0Q7UUFDaEQsUUFBUSxHQUFHLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUM5QixLQUFLLEdBQUcsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBRXhCLGdFQUFnRTtLQUNqRTtJQUVELGlGQUFpRjtJQUNqRix1RUFBdUU7SUFFdkUsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDcEMsUUFBUTtJQUNSLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUN2QyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ2pDLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYjJCb2R5RGVmLCBiMkJvZHlUeXBlLCBiMkZpeHR1cmVEZWYsIGIyUG9seWdvblNoYXBlLCBiMlZlYzIsIGIyV29ybGQgfSBmcm9tICcuLi8uLic7XHJcblxyXG50ZXN0KCdoZWxsbyB3b3JsZCcsICgpID0+IHtcclxuICAvLyBEZWZpbmUgdGhlIGdyYXZpdHkgdmVjdG9yLlxyXG4gIGNvbnN0IGdyYXZpdHkgPSBuZXcgYjJWZWMyKDAsIC0xMCk7XHJcblxyXG4gIC8vIENvbnN0cnVjdCBhIHdvcmxkIG9iamVjdCwgd2hpY2ggd2lsbCBob2xkIGFuZCBzaW11bGF0ZSB0aGUgcmlnaWQgYm9kaWVzLlxyXG4gIGNvbnN0IHdvcmxkID0gbmV3IGIyV29ybGQoZ3Jhdml0eSk7XHJcblxyXG4gIC8vIERlZmluZSB0aGUgZ3JvdW5kIGJvZHkuXHJcbiAgY29uc3QgZ3JvdW5kQm9keURlZiA9IG5ldyBiMkJvZHlEZWYoKTtcclxuICBncm91bmRCb2R5RGVmLnBvc2l0aW9uLlNldCgwLCAtMTApO1xyXG5cclxuICAvLyBDYWxsIHRoZSBib2R5IGZhY3Rvcnkgd2hpY2ggYWxsb2NhdGVzIG1lbW9yeSBmb3IgdGhlIGdyb3VuZCBib2R5XHJcbiAgLy8gZnJvbSBhIHBvb2wgYW5kIGNyZWF0ZXMgdGhlIGdyb3VuZCBib3ggc2hhcGUgKGFsc28gZnJvbSBhIHBvb2wpLlxyXG4gIC8vIFRoZSBib2R5IGlzIGFsc28gYWRkZWQgdG8gdGhlIHdvcmxkLlxyXG4gIGNvbnN0IGdyb3VuZEJvZHkgPSB3b3JsZC5DcmVhdGVCb2R5KGdyb3VuZEJvZHlEZWYpO1xyXG5cclxuICAvLyBEZWZpbmUgdGhlIGdyb3VuZCBib3ggc2hhcGUuXHJcbiAgY29uc3QgZ3JvdW5kQm94ID0gbmV3IGIyUG9seWdvblNoYXBlKCk7XHJcblxyXG4gIC8vIFRoZSBleHRlbnRzIGFyZSB0aGUgaGFsZi13aWR0aHMgb2YgdGhlIGJveC5cclxuICBncm91bmRCb3guU2V0QXNCb3goNTAuMCwgMTAuMCk7XHJcblxyXG4gIC8vIEFkZCB0aGUgZ3JvdW5kIGZpeHR1cmUgdG8gdGhlIGdyb3VuZCBib2R5LlxyXG4gIGdyb3VuZEJvZHkuQ3JlYXRlRml4dHVyZShncm91bmRCb3gsIDAuMCk7XHJcblxyXG4gIC8vIERlZmluZSB0aGUgZHluYW1pYyBib2R5LiBXZSBzZXQgaXRzIHBvc2l0aW9uIGFuZCBjYWxsIHRoZSBib2R5IGZhY3RvcnkuXHJcbiAgY29uc3QgYm9keURlZiA9IG5ldyBiMkJvZHlEZWYoKTtcclxuICBib2R5RGVmLnR5cGUgPSBiMkJvZHlUeXBlLmIyX2R5bmFtaWNCb2R5O1xyXG4gIGJvZHlEZWYucG9zaXRpb24uU2V0KDAuMCwgNC4wKTtcclxuICBjb25zdCBib2R5ID0gd29ybGQuQ3JlYXRlQm9keShib2R5RGVmKTtcclxuXHJcbiAgLy8gRGVmaW5lIGFub3RoZXIgYm94IHNoYXBlIGZvciBvdXIgZHluYW1pYyBib2R5LlxyXG4gIGNvbnN0IGR5bmFtaWNCb3ggPSBuZXcgYjJQb2x5Z29uU2hhcGUoKTtcclxuICBkeW5hbWljQm94LlNldEFzQm94KDEuMCwgMS4wKTtcclxuXHJcbiAgLy8gRGVmaW5lIHRoZSBkeW5hbWljIGJvZHkgZml4dHVyZS5cclxuICBjb25zdCBmaXh0dXJlRGVmID0gbmV3IGIyRml4dHVyZURlZigpO1xyXG4gIGZpeHR1cmVEZWYuc2hhcGUgPSBkeW5hbWljQm94O1xyXG5cclxuICAvLyBTZXQgdGhlIGJveCBkZW5zaXR5IHRvIGJlIG5vbi16ZXJvLCBzbyBpdCB3aWxsIGJlIGR5bmFtaWMuXHJcbiAgZml4dHVyZURlZi5kZW5zaXR5ID0gMS4wO1xyXG5cclxuICAvLyBPdmVycmlkZSB0aGUgZGVmYXVsdCBmcmljdGlvbi5cclxuICBmaXh0dXJlRGVmLmZyaWN0aW9uID0gMC4zO1xyXG5cclxuICAvLyBBZGQgdGhlIHNoYXBlIHRvIHRoZSBib2R5LlxyXG4gIGJvZHkuQ3JlYXRlRml4dHVyZShmaXh0dXJlRGVmKTtcclxuXHJcbiAgLy8gUHJlcGFyZSBmb3Igc2ltdWxhdGlvbi4gVHlwaWNhbGx5IHdlIHVzZSBhIHRpbWUgc3RlcCBvZiAxLzYwIG9mIGFcclxuICAvLyBzZWNvbmQgKDYwSHopIGFuZCAxMCBpdGVyYXRpb25zLiBUaGlzIHByb3ZpZGVzIGEgaGlnaCBxdWFsaXR5IHNpbXVsYXRpb25cclxuICAvLyBpbiBtb3N0IGdhbWUgc2NlbmFyaW9zLlxyXG4gIGNvbnN0IHRpbWVTdGVwID0gMS4wIC8gNjAuMDtcclxuICBjb25zdCB2ZWxvY2l0eUl0ZXJhdGlvbnMgPSA2O1xyXG4gIGNvbnN0IHBvc2l0aW9uSXRlcmF0aW9ucyA9IDI7XHJcblxyXG4gIGxldCBwb3NpdGlvbiA9IGJvZHkuR2V0UG9zaXRpb24oKTtcclxuICBsZXQgYW5nbGUgPSBib2R5LkdldEFuZ2xlKCk7XHJcblxyXG4gIC8vIFRoaXMgaXMgb3VyIGxpdHRsZSBnYW1lIGxvb3AuXHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCA2MDsgKytpKSB7XHJcbiAgICAvLyBJbnN0cnVjdCB0aGUgd29ybGQgdG8gcGVyZm9ybSBhIHNpbmdsZSBzdGVwIG9mIHNpbXVsYXRpb24uXHJcbiAgICAvLyBJdCBpcyBnZW5lcmFsbHkgYmVzdCB0byBrZWVwIHRoZSB0aW1lIHN0ZXAgYW5kIGl0ZXJhdGlvbnMgZml4ZWQuXHJcbiAgICB3b3JsZC5TdGVwKHRpbWVTdGVwLCB2ZWxvY2l0eUl0ZXJhdGlvbnMsIHBvc2l0aW9uSXRlcmF0aW9ucyk7XHJcblxyXG4gICAgLy8gTm93IHByaW50IHRoZSBwb3NpdGlvbiBhbmQgYW5nbGUgb2YgdGhlIGJvZHkuXHJcbiAgICBwb3NpdGlvbiA9IGJvZHkuR2V0UG9zaXRpb24oKTtcclxuICAgIGFuZ2xlID0gYm9keS5HZXRBbmdsZSgpO1xyXG5cclxuICAgIC8vIHByaW50ZihcIiU0LjJmICU0LjJmICU0LjJmXFxuXCIsIHBvc2l0aW9uLngsIHBvc2l0aW9uLnksIGFuZ2xlKTtcclxuICB9XHJcblxyXG4gIC8vIFdoZW4gdGhlIHdvcmxkIGRlc3RydWN0b3IgaXMgY2FsbGVkLCBhbGwgYm9kaWVzIGFuZCBqb2ludHMgYXJlIGZyZWVkLiBUaGlzIGNhblxyXG4gIC8vIGNyZWF0ZSBvcnBoYW5lZCBwb2ludGVycywgc28gYmUgY2FyZWZ1bCBhYm91dCB5b3VyIHdvcmxkIG1hbmFnZW1lbnQuXHJcblxyXG4gIGV4cGVjdChwb3NpdGlvbi54KS50b0JlQ2xvc2VUbygwLjApO1xyXG4gIC8vIFRPRE86XHJcbiAgZXhwZWN0KHBvc2l0aW9uLnkpLnRvQmVDbG9zZVRvKDEuMCwgMSk7XHJcbiAgZXhwZWN0KGFuZ2xlKS50b0JlQ2xvc2VUbygwLjApO1xyXG59KTtcclxuIl19