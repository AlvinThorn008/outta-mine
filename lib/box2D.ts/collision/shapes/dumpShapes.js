function DumpChainShape(shape, log) {
    log('    const shape: b2ChainShape = new b2ChainShape();\n');
    log('    const vs: b2Vec2[] = [];\n');
    for (let i = 0; i < shape.m_count; ++i) {
        log('    vs[%d] = new bVec2(%.15f, %.15f);\n', i, shape.m_vertices[i].x, shape.m_vertices[i].y);
    }
    log('    shape.CreateChain(vs, %d);\n', shape.m_count);
    log('    shape.m_prevVertex.Set(%.15f, %.15f);\n', shape.m_prevVertex.x, shape.m_prevVertex.y);
    log('    shape.m_nextVertex.Set(%.15f, %.15f);\n', shape.m_nextVertex.x, shape.m_nextVertex.y);
    log('    shape.m_hasPrevVertex = %s;\n', shape.m_hasPrevVertex ? 'true' : 'false');
    log('    shape.m_hasNextVertex = %s;\n', shape.m_hasNextVertex ? 'true' : 'false');
}
function DumpCircleShape(shape, log) {
    log('    const shape: b2CircleShape = new b2CircleShape();\n');
    log('    shape.m_radius = %.15f;\n', shape.m_radius);
    log('    shape.m_p.Set(%.15f, %.15f);\n', shape.m_p.x, shape.m_p.y);
}
function DumpEdgeShape(shape, log) {
    log('    const shape: b2EdgeShape = new b2EdgeShape();\n');
    log('    shape.m_radius = %.15f;\n', shape.m_radius);
    log('    shape.m_vertex0.Set(%.15f, %.15f);\n', shape.m_vertex0.x, shape.m_vertex0.y);
    log('    shape.m_vertex1.Set(%.15f, %.15f);\n', shape.m_vertex1.x, shape.m_vertex1.y);
    log('    shape.m_vertex2.Set(%.15f, %.15f);\n', shape.m_vertex2.x, shape.m_vertex2.y);
    log('    shape.m_vertex3.Set(%.15f, %.15f);\n', shape.m_vertex3.x, shape.m_vertex3.y);
    log('    shape.m_hasVertex0 = %s;\n', shape.m_hasVertex0);
    log('    shape.m_hasVertex3 = %s;\n', shape.m_hasVertex3);
}
function DumpPolygonShape(shape, log) {
    log('    const shape: b2PolygonShape = new b2PolygonShape();\n');
    log('    const vs: b2Vec2[] = [];\n');
    for (let i = 0; i < shape.m_count; ++i) {
        log('    vs[%d] = new b2Vec2(%.15f, %.15f);\n', i, shape.m_vertices[i].x, shape.m_vertices[i].y);
    }
    log('    shape.Set(vs, %d);\n', shape.m_count);
}
export function DumpShape(shape, log) {
    if (shape.m_type === 3 /* e_chainShape */) {
        DumpChainShape(shape, log);
    }
    else if (shape.m_type === 0 /* e_circleShape */) {
        DumpCircleShape(shape, log);
    }
    else if (shape.m_type === 1 /* e_edgeShape */) {
        DumpEdgeShape(shape, log);
    }
    else if (shape.m_type === 2 /* e_polygonShape */) {
        DumpPolygonShape(shape, log);
    }
    else {
        // TODO: log error
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHVtcFNoYXBlcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb2xsaXNpb24vc2hhcGVzL2R1bXBTaGFwZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBTUEsU0FBUyxjQUFjLENBQUMsS0FBbUIsRUFBRSxHQUE2QztJQUN4RixHQUFHLENBQUMsdURBQXVELENBQUMsQ0FBQztJQUM3RCxHQUFHLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztJQUN0QyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsRUFBRTtRQUN0QyxHQUFHLENBQUMseUNBQXlDLEVBQUUsQ0FBQyxFQUFFLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDakc7SUFDRCxHQUFHLENBQUMsa0NBQWtDLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3ZELEdBQUcsQ0FBQyw2Q0FBNkMsRUFBRSxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQy9GLEdBQUcsQ0FBQyw2Q0FBNkMsRUFBRSxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQy9GLEdBQUcsQ0FBQyxtQ0FBbUMsRUFBRSxLQUFLLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ25GLEdBQUcsQ0FBQyxtQ0FBbUMsRUFBRSxLQUFLLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ3JGLENBQUM7QUFFRCxTQUFTLGVBQWUsQ0FDdEIsS0FBb0IsRUFDcEIsR0FBNkM7SUFFN0MsR0FBRyxDQUFDLHlEQUF5RCxDQUFDLENBQUM7SUFDL0QsR0FBRyxDQUFDLCtCQUErQixFQUFFLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNyRCxHQUFHLENBQUMsb0NBQW9DLEVBQUUsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN0RSxDQUFDO0FBRUQsU0FBUyxhQUFhLENBQUMsS0FBa0IsRUFBRSxHQUE2QztJQUN0RixHQUFHLENBQUMscURBQXFELENBQUMsQ0FBQztJQUMzRCxHQUFHLENBQUMsK0JBQStCLEVBQUUsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3JELEdBQUcsQ0FBQywwQ0FBMEMsRUFBRSxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3RGLEdBQUcsQ0FBQywwQ0FBMEMsRUFBRSxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3RGLEdBQUcsQ0FBQywwQ0FBMEMsRUFBRSxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3RGLEdBQUcsQ0FBQywwQ0FBMEMsRUFBRSxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3RGLEdBQUcsQ0FBQyxnQ0FBZ0MsRUFBRSxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDMUQsR0FBRyxDQUFDLGdDQUFnQyxFQUFFLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUM1RCxDQUFDO0FBRUQsU0FBUyxnQkFBZ0IsQ0FDdkIsS0FBcUIsRUFDckIsR0FBNkM7SUFFN0MsR0FBRyxDQUFDLDJEQUEyRCxDQUFDLENBQUM7SUFDakUsR0FBRyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7SUFDdEMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLEVBQUU7UUFDdEMsR0FBRyxDQUNELDBDQUEwQyxFQUMxQyxDQUFDLEVBQ0QsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ3JCLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUN0QixDQUFDO0tBQ0g7SUFDRCxHQUFHLENBQUMsMEJBQTBCLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ2pELENBQUM7QUFFRCxNQUFNLFVBQVUsU0FBUyxDQUFDLEtBQWMsRUFBRSxHQUE2QztJQUNyRixJQUFJLEtBQUssQ0FBQyxNQUFNLHlCQUE2QixFQUFFO1FBQzdDLGNBQWMsQ0FBQyxLQUFxQixFQUFFLEdBQUcsQ0FBQyxDQUFDO0tBQzVDO1NBQU0sSUFBSSxLQUFLLENBQUMsTUFBTSwwQkFBOEIsRUFBRTtRQUNyRCxlQUFlLENBQUMsS0FBc0IsRUFBRSxHQUFHLENBQUMsQ0FBQztLQUM5QztTQUFNLElBQUksS0FBSyxDQUFDLE1BQU0sd0JBQTRCLEVBQUU7UUFDbkQsYUFBYSxDQUFDLEtBQW9CLEVBQUUsR0FBRyxDQUFDLENBQUM7S0FDMUM7U0FBTSxJQUFJLEtBQUssQ0FBQyxNQUFNLDJCQUErQixFQUFFO1FBQ3RELGdCQUFnQixDQUFDLEtBQXVCLEVBQUUsR0FBRyxDQUFDLENBQUM7S0FDaEQ7U0FBTTtRQUNMLGtCQUFrQjtLQUNuQjtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBiMkNoYWluU2hhcGUgfSBmcm9tICcuL2IyQ2hhaW5TaGFwZSc7XHJcbmltcG9ydCB7IGIyQ2lyY2xlU2hhcGUgfSBmcm9tICcuL2IyQ2lyY2xlU2hhcGUnO1xyXG5pbXBvcnQgeyBiMkVkZ2VTaGFwZSB9IGZyb20gJy4vYjJFZGdlU2hhcGUnO1xyXG5pbXBvcnQgeyBiMlBvbHlnb25TaGFwZSB9IGZyb20gJy4vYjJQb2x5Z29uU2hhcGUnO1xyXG5pbXBvcnQgeyBiMlNoYXBlLCBiMlNoYXBlVHlwZSB9IGZyb20gJy4vYjJTaGFwZSc7XHJcblxyXG5mdW5jdGlvbiBEdW1wQ2hhaW5TaGFwZShzaGFwZTogYjJDaGFpblNoYXBlLCBsb2c6IChmb3JtYXQ6IHN0cmluZywgLi4uYXJnczogYW55W10pID0+IHZvaWQpOiB2b2lkIHtcclxuICBsb2coJyAgICBjb25zdCBzaGFwZTogYjJDaGFpblNoYXBlID0gbmV3IGIyQ2hhaW5TaGFwZSgpO1xcbicpO1xyXG4gIGxvZygnICAgIGNvbnN0IHZzOiBiMlZlYzJbXSA9IFtdO1xcbicpO1xyXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc2hhcGUubV9jb3VudDsgKytpKSB7XHJcbiAgICBsb2coJyAgICB2c1slZF0gPSBuZXcgYlZlYzIoJS4xNWYsICUuMTVmKTtcXG4nLCBpLCBzaGFwZS5tX3ZlcnRpY2VzW2ldLngsIHNoYXBlLm1fdmVydGljZXNbaV0ueSk7XHJcbiAgfVxyXG4gIGxvZygnICAgIHNoYXBlLkNyZWF0ZUNoYWluKHZzLCAlZCk7XFxuJywgc2hhcGUubV9jb3VudCk7XHJcbiAgbG9nKCcgICAgc2hhcGUubV9wcmV2VmVydGV4LlNldCglLjE1ZiwgJS4xNWYpO1xcbicsIHNoYXBlLm1fcHJldlZlcnRleC54LCBzaGFwZS5tX3ByZXZWZXJ0ZXgueSk7XHJcbiAgbG9nKCcgICAgc2hhcGUubV9uZXh0VmVydGV4LlNldCglLjE1ZiwgJS4xNWYpO1xcbicsIHNoYXBlLm1fbmV4dFZlcnRleC54LCBzaGFwZS5tX25leHRWZXJ0ZXgueSk7XHJcbiAgbG9nKCcgICAgc2hhcGUubV9oYXNQcmV2VmVydGV4ID0gJXM7XFxuJywgc2hhcGUubV9oYXNQcmV2VmVydGV4ID8gJ3RydWUnIDogJ2ZhbHNlJyk7XHJcbiAgbG9nKCcgICAgc2hhcGUubV9oYXNOZXh0VmVydGV4ID0gJXM7XFxuJywgc2hhcGUubV9oYXNOZXh0VmVydGV4ID8gJ3RydWUnIDogJ2ZhbHNlJyk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIER1bXBDaXJjbGVTaGFwZShcclxuICBzaGFwZTogYjJDaXJjbGVTaGFwZSxcclxuICBsb2c6IChmb3JtYXQ6IHN0cmluZywgLi4uYXJnczogYW55W10pID0+IHZvaWQsXHJcbik6IHZvaWQge1xyXG4gIGxvZygnICAgIGNvbnN0IHNoYXBlOiBiMkNpcmNsZVNoYXBlID0gbmV3IGIyQ2lyY2xlU2hhcGUoKTtcXG4nKTtcclxuICBsb2coJyAgICBzaGFwZS5tX3JhZGl1cyA9ICUuMTVmO1xcbicsIHNoYXBlLm1fcmFkaXVzKTtcclxuICBsb2coJyAgICBzaGFwZS5tX3AuU2V0KCUuMTVmLCAlLjE1Zik7XFxuJywgc2hhcGUubV9wLngsIHNoYXBlLm1fcC55KTtcclxufVxyXG5cclxuZnVuY3Rpb24gRHVtcEVkZ2VTaGFwZShzaGFwZTogYjJFZGdlU2hhcGUsIGxvZzogKGZvcm1hdDogc3RyaW5nLCAuLi5hcmdzOiBhbnlbXSkgPT4gdm9pZCk6IHZvaWQge1xyXG4gIGxvZygnICAgIGNvbnN0IHNoYXBlOiBiMkVkZ2VTaGFwZSA9IG5ldyBiMkVkZ2VTaGFwZSgpO1xcbicpO1xyXG4gIGxvZygnICAgIHNoYXBlLm1fcmFkaXVzID0gJS4xNWY7XFxuJywgc2hhcGUubV9yYWRpdXMpO1xyXG4gIGxvZygnICAgIHNoYXBlLm1fdmVydGV4MC5TZXQoJS4xNWYsICUuMTVmKTtcXG4nLCBzaGFwZS5tX3ZlcnRleDAueCwgc2hhcGUubV92ZXJ0ZXgwLnkpO1xyXG4gIGxvZygnICAgIHNoYXBlLm1fdmVydGV4MS5TZXQoJS4xNWYsICUuMTVmKTtcXG4nLCBzaGFwZS5tX3ZlcnRleDEueCwgc2hhcGUubV92ZXJ0ZXgxLnkpO1xyXG4gIGxvZygnICAgIHNoYXBlLm1fdmVydGV4Mi5TZXQoJS4xNWYsICUuMTVmKTtcXG4nLCBzaGFwZS5tX3ZlcnRleDIueCwgc2hhcGUubV92ZXJ0ZXgyLnkpO1xyXG4gIGxvZygnICAgIHNoYXBlLm1fdmVydGV4My5TZXQoJS4xNWYsICUuMTVmKTtcXG4nLCBzaGFwZS5tX3ZlcnRleDMueCwgc2hhcGUubV92ZXJ0ZXgzLnkpO1xyXG4gIGxvZygnICAgIHNoYXBlLm1faGFzVmVydGV4MCA9ICVzO1xcbicsIHNoYXBlLm1faGFzVmVydGV4MCk7XHJcbiAgbG9nKCcgICAgc2hhcGUubV9oYXNWZXJ0ZXgzID0gJXM7XFxuJywgc2hhcGUubV9oYXNWZXJ0ZXgzKTtcclxufVxyXG5cclxuZnVuY3Rpb24gRHVtcFBvbHlnb25TaGFwZShcclxuICBzaGFwZTogYjJQb2x5Z29uU2hhcGUsXHJcbiAgbG9nOiAoZm9ybWF0OiBzdHJpbmcsIC4uLmFyZ3M6IGFueVtdKSA9PiB2b2lkLFxyXG4pOiB2b2lkIHtcclxuICBsb2coJyAgICBjb25zdCBzaGFwZTogYjJQb2x5Z29uU2hhcGUgPSBuZXcgYjJQb2x5Z29uU2hhcGUoKTtcXG4nKTtcclxuICBsb2coJyAgICBjb25zdCB2czogYjJWZWMyW10gPSBbXTtcXG4nKTtcclxuICBmb3IgKGxldCBpID0gMDsgaSA8IHNoYXBlLm1fY291bnQ7ICsraSkge1xyXG4gICAgbG9nKFxyXG4gICAgICAnICAgIHZzWyVkXSA9IG5ldyBiMlZlYzIoJS4xNWYsICUuMTVmKTtcXG4nLFxyXG4gICAgICBpLFxyXG4gICAgICBzaGFwZS5tX3ZlcnRpY2VzW2ldLngsXHJcbiAgICAgIHNoYXBlLm1fdmVydGljZXNbaV0ueSxcclxuICAgICk7XHJcbiAgfVxyXG4gIGxvZygnICAgIHNoYXBlLlNldCh2cywgJWQpO1xcbicsIHNoYXBlLm1fY291bnQpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gRHVtcFNoYXBlKHNoYXBlOiBiMlNoYXBlLCBsb2c6IChmb3JtYXQ6IHN0cmluZywgLi4uYXJnczogYW55W10pID0+IHZvaWQpOiB2b2lkIHtcclxuICBpZiAoc2hhcGUubV90eXBlID09PSBiMlNoYXBlVHlwZS5lX2NoYWluU2hhcGUpIHtcclxuICAgIER1bXBDaGFpblNoYXBlKHNoYXBlIGFzIGIyQ2hhaW5TaGFwZSwgbG9nKTtcclxuICB9IGVsc2UgaWYgKHNoYXBlLm1fdHlwZSA9PT0gYjJTaGFwZVR5cGUuZV9jaXJjbGVTaGFwZSkge1xyXG4gICAgRHVtcENpcmNsZVNoYXBlKHNoYXBlIGFzIGIyQ2lyY2xlU2hhcGUsIGxvZyk7XHJcbiAgfSBlbHNlIGlmIChzaGFwZS5tX3R5cGUgPT09IGIyU2hhcGVUeXBlLmVfZWRnZVNoYXBlKSB7XHJcbiAgICBEdW1wRWRnZVNoYXBlKHNoYXBlIGFzIGIyRWRnZVNoYXBlLCBsb2cpO1xyXG4gIH0gZWxzZSBpZiAoc2hhcGUubV90eXBlID09PSBiMlNoYXBlVHlwZS5lX3BvbHlnb25TaGFwZSkge1xyXG4gICAgRHVtcFBvbHlnb25TaGFwZShzaGFwZSBhcyBiMlBvbHlnb25TaGFwZSwgbG9nKTtcclxuICB9IGVsc2Uge1xyXG4gICAgLy8gVE9ETzogbG9nIGVycm9yXHJcbiAgfVxyXG59XHJcbiJdfQ==