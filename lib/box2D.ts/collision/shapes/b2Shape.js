/*
 * Copyright (c) 2006-2009 Erin Catto http://www.box2d.org
 *
 * This software is provided 'as-is', without any express or implied
 * warranty.  In no event will the authors be held liable for any damages
 * arising from the use of this software.
 * Permission is granted to anyone to use this software for any purpose,
 * including commercial applications, and to alter it and redistribute it
 * freely, subject to the following restrictions:
 * 1. The origin of this software must not be misrepresented; you must not
 * claim that you wrote the original software. If you use this software
 * in a product, an acknowledgment in the product documentation would be
 * appreciated but is not required.
 * 2. Altered source versions must be plainly marked as such, and must not be
 * misrepresented as being the original software.
 * 3. This notice may not be removed or altered from any source distribution.
 */
import { b2Vec2 } from '../../common/b2Math';
import { b2Assert } from '../../common/b2Settings';
/// This holds the mass data computed for a shape.
export class b2MassData {
    constructor() {
        /// The mass of the shape, usually in kilograms.
        this.mass = NaN;
        /// The rotational inertia of the shape about the local origin.
        this.I = NaN;
        /// The position of the shape's centroid relative to the shape's origin.
        this.center = new b2Vec2();
        this.mass = 0.0;
        this.I = 0.0;
    }
}
/// A shape is used for collision detection. You can create a shape however you like.
/// Shapes used for simulation in b2World are created automatically when a b2Fixture
/// is created. Shapes may encapsulate a one or more child shapes.
export class b2Shape {
    constructor(type, radius) {
        /// Radius of a shape. For polygonal shapes this must be b2_polygonRadius. There is no support for
        /// making rounded polygons.
        this.m_radius = NaN;
        this.m_type = type;
        this.m_radius = radius;
    }
    Copy(other) {
        !!B2_DEBUG && b2Assert(this.m_type === other.m_type);
        this.m_radius = other.m_radius;
        return this;
    }
    /// Get the type of this shape. You can use this to down cast to the concrete shape.
    /// @return the shape type.
    GetType() {
        return this.m_type;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYjJTaGFwZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb2xsaXNpb24vc2hhcGVzL2IyU2hhcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7R0FnQkc7QUFFSCxPQUFPLEVBQWUsTUFBTSxFQUFNLE1BQU0scUJBQXFCLENBQUM7QUFHOUQsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBRW5ELGtEQUFrRDtBQUNsRCxNQUFNLE9BQU8sVUFBVTtJQVVyQjtRQVRBLGdEQUFnRDtRQUNoRCxTQUFJLEdBQUcsR0FBRyxDQUFDO1FBRVgsK0RBQStEO1FBQy9ELE1BQUMsR0FBRyxHQUFHLENBQUM7UUFFUix3RUFBd0U7UUFDL0QsV0FBTSxHQUFHLElBQUksTUFBTSxFQUFFLENBQUM7UUFHN0IsSUFBSSxDQUFDLElBQUksR0FBRyxHQUFHLENBQUM7UUFDaEIsSUFBSSxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7SUFDZixDQUFDO0NBQ0Y7QUFXRCxxRkFBcUY7QUFDckYsb0ZBQW9GO0FBQ3BGLGtFQUFrRTtBQUNsRSxNQUFNLE9BQWdCLE9BQU87SUFPM0IsWUFBWSxJQUFpQixFQUFFLE1BQWM7UUFKN0Msa0dBQWtHO1FBQ2xHLDRCQUE0QjtRQUM1QixhQUFRLEdBQUcsR0FBRyxDQUFDO1FBR2IsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7UUFDbkIsSUFBSSxDQUFDLFFBQVEsR0FBRyxNQUFNLENBQUM7SUFDekIsQ0FBQztJQUtELElBQUksQ0FBQyxLQUFjO1FBQ2pCLENBQUMsQ0FBQyxRQUFRLElBQUksUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLEtBQUssS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3JELElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQztRQUMvQixPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFRCxvRkFBb0Y7SUFDcEYsMkJBQTJCO0lBQzNCLE9BQU87UUFDTCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDckIsQ0FBQztDQTRDRiIsInNvdXJjZXNDb250ZW50IjpbIi8qXHJcbiAqIENvcHlyaWdodCAoYykgMjAwNi0yMDA5IEVyaW4gQ2F0dG8gaHR0cDovL3d3dy5ib3gyZC5vcmdcclxuICpcclxuICogVGhpcyBzb2Z0d2FyZSBpcyBwcm92aWRlZCAnYXMtaXMnLCB3aXRob3V0IGFueSBleHByZXNzIG9yIGltcGxpZWRcclxuICogd2FycmFudHkuICBJbiBubyBldmVudCB3aWxsIHRoZSBhdXRob3JzIGJlIGhlbGQgbGlhYmxlIGZvciBhbnkgZGFtYWdlc1xyXG4gKiBhcmlzaW5nIGZyb20gdGhlIHVzZSBvZiB0aGlzIHNvZnR3YXJlLlxyXG4gKiBQZXJtaXNzaW9uIGlzIGdyYW50ZWQgdG8gYW55b25lIHRvIHVzZSB0aGlzIHNvZnR3YXJlIGZvciBhbnkgcHVycG9zZSxcclxuICogaW5jbHVkaW5nIGNvbW1lcmNpYWwgYXBwbGljYXRpb25zLCBhbmQgdG8gYWx0ZXIgaXQgYW5kIHJlZGlzdHJpYnV0ZSBpdFxyXG4gKiBmcmVlbHksIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyByZXN0cmljdGlvbnM6XHJcbiAqIDEuIFRoZSBvcmlnaW4gb2YgdGhpcyBzb2Z0d2FyZSBtdXN0IG5vdCBiZSBtaXNyZXByZXNlbnRlZDsgeW91IG11c3Qgbm90XHJcbiAqIGNsYWltIHRoYXQgeW91IHdyb3RlIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS4gSWYgeW91IHVzZSB0aGlzIHNvZnR3YXJlXHJcbiAqIGluIGEgcHJvZHVjdCwgYW4gYWNrbm93bGVkZ21lbnQgaW4gdGhlIHByb2R1Y3QgZG9jdW1lbnRhdGlvbiB3b3VsZCBiZVxyXG4gKiBhcHByZWNpYXRlZCBidXQgaXMgbm90IHJlcXVpcmVkLlxyXG4gKiAyLiBBbHRlcmVkIHNvdXJjZSB2ZXJzaW9ucyBtdXN0IGJlIHBsYWlubHkgbWFya2VkIGFzIHN1Y2gsIGFuZCBtdXN0IG5vdCBiZVxyXG4gKiBtaXNyZXByZXNlbnRlZCBhcyBiZWluZyB0aGUgb3JpZ2luYWwgc29mdHdhcmUuXHJcbiAqIDMuIFRoaXMgbm90aWNlIG1heSBub3QgYmUgcmVtb3ZlZCBvciBhbHRlcmVkIGZyb20gYW55IHNvdXJjZSBkaXN0cmlidXRpb24uXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgYjJUcmFuc2Zvcm0sIGIyVmVjMiwgWFkgfSBmcm9tICcuLi8uLi9jb21tb24vYjJNYXRoJztcclxuaW1wb3J0IHsgYjJBQUJCLCBiMlJheUNhc3RJbnB1dCwgYjJSYXlDYXN0T3V0cHV0IH0gZnJvbSAnLi4vYjJDb2xsaXNpb24nO1xyXG5pbXBvcnQgeyBiMkRpc3RhbmNlUHJveHkgfSBmcm9tICcuLi9iMkRpc3RhbmNlJztcclxuaW1wb3J0IHsgYjJBc3NlcnQgfSBmcm9tICcuLi8uLi9jb21tb24vYjJTZXR0aW5ncyc7XHJcblxyXG4vLy8gVGhpcyBob2xkcyB0aGUgbWFzcyBkYXRhIGNvbXB1dGVkIGZvciBhIHNoYXBlLlxyXG5leHBvcnQgY2xhc3MgYjJNYXNzRGF0YSB7XHJcbiAgLy8vIFRoZSBtYXNzIG9mIHRoZSBzaGFwZSwgdXN1YWxseSBpbiBraWxvZ3JhbXMuXHJcbiAgbWFzcyA9IE5hTjtcclxuXHJcbiAgLy8vIFRoZSByb3RhdGlvbmFsIGluZXJ0aWEgb2YgdGhlIHNoYXBlIGFib3V0IHRoZSBsb2NhbCBvcmlnaW4uXHJcbiAgSSA9IE5hTjtcclxuXHJcbiAgLy8vIFRoZSBwb3NpdGlvbiBvZiB0aGUgc2hhcGUncyBjZW50cm9pZCByZWxhdGl2ZSB0byB0aGUgc2hhcGUncyBvcmlnaW4uXHJcbiAgcmVhZG9ubHkgY2VudGVyID0gbmV3IGIyVmVjMigpO1xyXG5cclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHRoaXMubWFzcyA9IDAuMDtcclxuICAgIHRoaXMuSSA9IDAuMDtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBlbnVtIGIyU2hhcGVUeXBlIHtcclxuICBlX3Vua25vd24gPSAtMSxcclxuICBlX2NpcmNsZVNoYXBlID0gMCxcclxuICBlX2VkZ2VTaGFwZSA9IDEsXHJcbiAgZV9wb2x5Z29uU2hhcGUgPSAyLFxyXG4gIGVfY2hhaW5TaGFwZSA9IDMsXHJcbiAgZV9zaGFwZVR5cGVDb3VudCA9IDQsXHJcbn1cclxuXHJcbi8vLyBBIHNoYXBlIGlzIHVzZWQgZm9yIGNvbGxpc2lvbiBkZXRlY3Rpb24uIFlvdSBjYW4gY3JlYXRlIGEgc2hhcGUgaG93ZXZlciB5b3UgbGlrZS5cclxuLy8vIFNoYXBlcyB1c2VkIGZvciBzaW11bGF0aW9uIGluIGIyV29ybGQgYXJlIGNyZWF0ZWQgYXV0b21hdGljYWxseSB3aGVuIGEgYjJGaXh0dXJlXHJcbi8vLyBpcyBjcmVhdGVkLiBTaGFwZXMgbWF5IGVuY2Fwc3VsYXRlIGEgb25lIG9yIG1vcmUgY2hpbGQgc2hhcGVzLlxyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgYjJTaGFwZSB7XHJcbiAgcmVhZG9ubHkgbV90eXBlOiBiMlNoYXBlVHlwZTtcclxuXHJcbiAgLy8vIFJhZGl1cyBvZiBhIHNoYXBlLiBGb3IgcG9seWdvbmFsIHNoYXBlcyB0aGlzIG11c3QgYmUgYjJfcG9seWdvblJhZGl1cy4gVGhlcmUgaXMgbm8gc3VwcG9ydCBmb3JcclxuICAvLy8gbWFraW5nIHJvdW5kZWQgcG9seWdvbnMuXHJcbiAgbV9yYWRpdXMgPSBOYU47XHJcblxyXG4gIGNvbnN0cnVjdG9yKHR5cGU6IGIyU2hhcGVUeXBlLCByYWRpdXM6IG51bWJlcikge1xyXG4gICAgdGhpcy5tX3R5cGUgPSB0eXBlO1xyXG4gICAgdGhpcy5tX3JhZGl1cyA9IHJhZGl1cztcclxuICB9XHJcblxyXG4gIC8vLyBDbG9uZSB0aGUgY29uY3JldGUgc2hhcGUuXHJcbiAgYWJzdHJhY3QgQ2xvbmUoKTogYjJTaGFwZTtcclxuXHJcbiAgQ29weShvdGhlcjogYjJTaGFwZSk6IGIyU2hhcGUge1xyXG4gICAgISFCMl9ERUJVRyAmJiBiMkFzc2VydCh0aGlzLm1fdHlwZSA9PT0gb3RoZXIubV90eXBlKTtcclxuICAgIHRoaXMubV9yYWRpdXMgPSBvdGhlci5tX3JhZGl1cztcclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuXHJcbiAgLy8vIEdldCB0aGUgdHlwZSBvZiB0aGlzIHNoYXBlLiBZb3UgY2FuIHVzZSB0aGlzIHRvIGRvd24gY2FzdCB0byB0aGUgY29uY3JldGUgc2hhcGUuXHJcbiAgLy8vIEByZXR1cm4gdGhlIHNoYXBlIHR5cGUuXHJcbiAgR2V0VHlwZSgpOiBiMlNoYXBlVHlwZSB7XHJcbiAgICByZXR1cm4gdGhpcy5tX3R5cGU7XHJcbiAgfVxyXG5cclxuICAvLy8gR2V0IHRoZSBudW1iZXIgb2YgY2hpbGQgcHJpbWl0aXZlcy5cclxuICBhYnN0cmFjdCBHZXRDaGlsZENvdW50KCk6IG51bWJlcjtcclxuXHJcbiAgLy8vIFRlc3QgYSBwb2ludCBmb3IgY29udGFpbm1lbnQgaW4gdGhpcyBzaGFwZS4gVGhpcyBvbmx5IHdvcmtzIGZvciBjb252ZXggc2hhcGVzLlxyXG4gIC8vLyBAcGFyYW0geGYgdGhlIHNoYXBlIHdvcmxkIHRyYW5zZm9ybS5cclxuICAvLy8gQHBhcmFtIHAgYSBwb2ludCBpbiB3b3JsZCBjb29yZGluYXRlcy5cclxuICBhYnN0cmFjdCBUZXN0UG9pbnQoeGY6IGIyVHJhbnNmb3JtLCBwOiBYWSk6IGJvb2xlYW47XHJcblxyXG4gIC8vLyBDb21wdXRlIHRoZSBkaXN0YW5jZSBmcm9tIHRoZSBjdXJyZW50IHNoYXBlIHRvIHRoZSBzcGVjaWZpZWQgcG9pbnQuIFRoaXMgb25seSB3b3JrcyBmb3IgY29udmV4IHNoYXBlcy5cclxuICAvLy8gQHBhcmFtIHhmIHRoZSBzaGFwZSB3b3JsZCB0cmFuc2Zvcm0uXHJcbiAgLy8vIEBwYXJhbSBwIGEgcG9pbnQgaW4gd29ybGQgY29vcmRpbmF0ZXMuXHJcbiAgLy8vIEBwYXJhbSBkaXN0YW5jZSByZXR1cm5zIHRoZSBkaXN0YW5jZSBmcm9tIHRoZSBjdXJyZW50IHNoYXBlLlxyXG4gIC8vLyBAcGFyYW0gbm9ybWFsIHJldHVybnMgdGhlIGRpcmVjdGlvbiBpbiB3aGljaCB0aGUgZGlzdGFuY2UgaW5jcmVhc2VzLlxyXG4gIGFic3RyYWN0IENvbXB1dGVEaXN0YW5jZSh4ZjogYjJUcmFuc2Zvcm0sIHA6IGIyVmVjMiwgbm9ybWFsOiBiMlZlYzIsIGNoaWxkSW5kZXg6IG51bWJlcik6IG51bWJlcjtcclxuXHJcbiAgLy8vIENhc3QgYSByYXkgYWdhaW5zdCBhIGNoaWxkIHNoYXBlLlxyXG4gIC8vLyBAcGFyYW0gb3V0cHV0IHRoZSByYXktY2FzdCByZXN1bHRzLlxyXG4gIC8vLyBAcGFyYW0gaW5wdXQgdGhlIHJheS1jYXN0IGlucHV0IHBhcmFtZXRlcnMuXHJcbiAgLy8vIEBwYXJhbSB0cmFuc2Zvcm0gdGhlIHRyYW5zZm9ybSB0byBiZSBhcHBsaWVkIHRvIHRoZSBzaGFwZS5cclxuICAvLy8gQHBhcmFtIGNoaWxkSW5kZXggdGhlIGNoaWxkIHNoYXBlIGluZGV4XHJcbiAgYWJzdHJhY3QgUmF5Q2FzdChcclxuICAgIG91dHB1dDogYjJSYXlDYXN0T3V0cHV0LFxyXG4gICAgaW5wdXQ6IGIyUmF5Q2FzdElucHV0LFxyXG4gICAgdHJhbnNmb3JtOiBiMlRyYW5zZm9ybSxcclxuICAgIGNoaWxkSW5kZXg6IG51bWJlcixcclxuICApOiBib29sZWFuO1xyXG5cclxuICAvLy8gR2l2ZW4gYSB0cmFuc2Zvcm0sIGNvbXB1dGUgdGhlIGFzc29jaWF0ZWQgYXhpcyBhbGlnbmVkIGJvdW5kaW5nIGJveCBmb3IgYSBjaGlsZCBzaGFwZS5cclxuICAvLy8gQHBhcmFtIGFhYmIgcmV0dXJucyB0aGUgYXhpcyBhbGlnbmVkIGJveC5cclxuICAvLy8gQHBhcmFtIHhmIHRoZSB3b3JsZCB0cmFuc2Zvcm0gb2YgdGhlIHNoYXBlLlxyXG4gIC8vLyBAcGFyYW0gY2hpbGRJbmRleCB0aGUgY2hpbGQgc2hhcGVcclxuICBhYnN0cmFjdCBDb21wdXRlQUFCQihhYWJiOiBiMkFBQkIsIHhmOiBiMlRyYW5zZm9ybSwgY2hpbGRJbmRleDogbnVtYmVyKTogdm9pZDtcclxuXHJcbiAgLy8vIENvbXB1dGUgdGhlIG1hc3MgcHJvcGVydGllcyBvZiB0aGlzIHNoYXBlIHVzaW5nIGl0cyBkaW1lbnNpb25zIGFuZCBkZW5zaXR5LlxyXG4gIC8vLyBUaGUgaW5lcnRpYSB0ZW5zb3IgaXMgY29tcHV0ZWQgYWJvdXQgdGhlIGxvY2FsIG9yaWdpbi5cclxuICAvLy8gQHBhcmFtIG1hc3NEYXRhIHJldHVybnMgdGhlIG1hc3MgZGF0YSBmb3IgdGhpcyBzaGFwZS5cclxuICAvLy8gQHBhcmFtIGRlbnNpdHkgdGhlIGRlbnNpdHkgaW4ga2lsb2dyYW1zIHBlciBtZXRlciBzcXVhcmVkLlxyXG4gIGFic3RyYWN0IENvbXB1dGVNYXNzKG1hc3NEYXRhOiBiMk1hc3NEYXRhLCBkZW5zaXR5OiBudW1iZXIpOiB2b2lkO1xyXG5cclxuICBhYnN0cmFjdCBTZXR1cERpc3RhbmNlUHJveHkocHJveHk6IGIyRGlzdGFuY2VQcm94eSwgaW5kZXg6IG51bWJlcik6IHZvaWQ7XHJcblxyXG4gIGFic3RyYWN0IENvbXB1dGVTdWJtZXJnZWRBcmVhKG5vcm1hbDogYjJWZWMyLCBvZmZzZXQ6IG51bWJlciwgeGY6IGIyVHJhbnNmb3JtLCBjOiBiMlZlYzIpOiBudW1iZXI7XHJcbn1cclxuIl19