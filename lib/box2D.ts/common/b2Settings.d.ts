export declare function b2Assert(condition: boolean, message?: string): void;
export declare function b2Maybe<T>(value: T | undefined, def: T): T;
export declare const b2_maxFloat = 1e+37;
export declare const b2_epsilon = 0.00001;
export declare const b2_epsilon_sq: number;
export declare const b2_pi: number;
export declare const b2_maxManifoldPoints = 2;
export declare const b2_maxPolygonVertices = 8;
export declare const b2_aabbExtension = 0.1;
export declare const b2_aabbMultiplier = 2;
export declare const b2_linearSlop = 0.008;
export declare const b2_angularSlop: number;
export declare const b2_polygonRadius: number;
export declare const b2_maxSubSteps = 8;
export declare const b2_maxTOIContacts = 32;
export declare const b2_velocityThreshold = 1;
export declare const b2_maxLinearCorrection = 0.2;
export declare const b2_maxAngularCorrection: number;
export declare const b2_maxTranslation = 2;
export declare const b2_maxTranslationSquared: number;
export declare const b2_maxRotation: number;
export declare const b2_maxRotationSquared: number;
export declare const b2_baumgarte = 0.2;
export declare const b2_toiBaumgarte = 0.75;
export declare const b2_timeToSleep = 0.5;
export declare const b2_linearSleepTolerance = 0.01;
export declare const b2_angularSleepTolerance: number;
export declare function b2Alloc(size: number): any;
export declare function b2Free(mem: any): void;
export declare function b2Log(message: string, ...args: any[]): void;
export declare class b2Version {
    major: number;
    minor: number;
    revision: number;
    constructor(major?: number, minor?: number, revision?: number);
    toString(): string;
}
export declare const b2_version: b2Version;
export declare const b2_branch = "master";
export declare const b2_commit = "fbf51801d80fc389d43dc46524520e89043b6faf";
export declare function b2ParseInt(v: string): number;
export declare function b2ParseUInt(v: string): number;
export declare function b2MakeArray<T>(length: number, init: (i: number) => T): T[];
export declare function b2MakeNullArray<T>(length: number): Array<T | null>;
export declare function b2MakeIntArray(length: number): number[];
export declare function b2MakeNumberArray(length: number): number[];
