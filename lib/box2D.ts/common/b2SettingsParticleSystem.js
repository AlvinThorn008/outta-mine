// Particle
/// A symbolic constant that stands for particle allocation error.
export const b2_invalidParticleIndex = -1;
export const b2_maxParticleIndex = 0x7fffffff;
/// The default distance between particles, multiplied by the particle diameter.
export const b2_particleStride = 0.75;
/// The minimum particle weight that produces pressure.
export const b2_minParticleWeight = 1.0;
/// The upper limit for particle pressure.
export const b2_maxParticlePressure = 0.25;
/// The upper limit for force between particles.
export const b2_maxParticleForce = 0.5;
/// The maximum distance between particles in a triad, multiplied by the particle diameter.
export const b2_maxTriadDistance = 2.0;
export const b2_maxTriadDistanceSquared = b2_maxTriadDistance * b2_maxTriadDistance;
/// The initial size of particle data buffers.
export const b2_minParticleSystemBufferCapacity = 256;
/// The time into the future that collisions against barrier particles will be detected.
export const b2_barrierCollisionTime = 2.5;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYjJTZXR0aW5nc1BhcnRpY2xlU3lzdGVtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvbW1vbi9iMlNldHRpbmdzUGFydGljbGVTeXN0ZW0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsV0FBVztBQUVYLGtFQUFrRTtBQUNsRSxNQUFNLENBQUMsTUFBTSx1QkFBdUIsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUUxQyxNQUFNLENBQUMsTUFBTSxtQkFBbUIsR0FBRyxVQUFVLENBQUM7QUFFOUMsZ0ZBQWdGO0FBQ2hGLE1BQU0sQ0FBQyxNQUFNLGlCQUFpQixHQUFHLElBQUksQ0FBQztBQUV0Qyx1REFBdUQ7QUFDdkQsTUFBTSxDQUFDLE1BQU0sb0JBQW9CLEdBQUcsR0FBRyxDQUFDO0FBRXhDLDBDQUEwQztBQUMxQyxNQUFNLENBQUMsTUFBTSxzQkFBc0IsR0FBRyxJQUFJLENBQUM7QUFFM0MsZ0RBQWdEO0FBQ2hELE1BQU0sQ0FBQyxNQUFNLG1CQUFtQixHQUFHLEdBQUcsQ0FBQztBQUV2QywyRkFBMkY7QUFDM0YsTUFBTSxDQUFDLE1BQU0sbUJBQW1CLEdBQUcsR0FBRyxDQUFDO0FBQ3ZDLE1BQU0sQ0FBQyxNQUFNLDBCQUEwQixHQUFXLG1CQUFtQixHQUFHLG1CQUFtQixDQUFDO0FBRTVGLDhDQUE4QztBQUM5QyxNQUFNLENBQUMsTUFBTSxrQ0FBa0MsR0FBRyxHQUFHLENBQUM7QUFFdEQsd0ZBQXdGO0FBQ3hGLE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLEdBQUcsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIFBhcnRpY2xlXHJcblxyXG4vLy8gQSBzeW1ib2xpYyBjb25zdGFudCB0aGF0IHN0YW5kcyBmb3IgcGFydGljbGUgYWxsb2NhdGlvbiBlcnJvci5cclxuZXhwb3J0IGNvbnN0IGIyX2ludmFsaWRQYXJ0aWNsZUluZGV4ID0gLTE7XHJcblxyXG5leHBvcnQgY29uc3QgYjJfbWF4UGFydGljbGVJbmRleCA9IDB4N2ZmZmZmZmY7XHJcblxyXG4vLy8gVGhlIGRlZmF1bHQgZGlzdGFuY2UgYmV0d2VlbiBwYXJ0aWNsZXMsIG11bHRpcGxpZWQgYnkgdGhlIHBhcnRpY2xlIGRpYW1ldGVyLlxyXG5leHBvcnQgY29uc3QgYjJfcGFydGljbGVTdHJpZGUgPSAwLjc1O1xyXG5cclxuLy8vIFRoZSBtaW5pbXVtIHBhcnRpY2xlIHdlaWdodCB0aGF0IHByb2R1Y2VzIHByZXNzdXJlLlxyXG5leHBvcnQgY29uc3QgYjJfbWluUGFydGljbGVXZWlnaHQgPSAxLjA7XHJcblxyXG4vLy8gVGhlIHVwcGVyIGxpbWl0IGZvciBwYXJ0aWNsZSBwcmVzc3VyZS5cclxuZXhwb3J0IGNvbnN0IGIyX21heFBhcnRpY2xlUHJlc3N1cmUgPSAwLjI1O1xyXG5cclxuLy8vIFRoZSB1cHBlciBsaW1pdCBmb3IgZm9yY2UgYmV0d2VlbiBwYXJ0aWNsZXMuXHJcbmV4cG9ydCBjb25zdCBiMl9tYXhQYXJ0aWNsZUZvcmNlID0gMC41O1xyXG5cclxuLy8vIFRoZSBtYXhpbXVtIGRpc3RhbmNlIGJldHdlZW4gcGFydGljbGVzIGluIGEgdHJpYWQsIG11bHRpcGxpZWQgYnkgdGhlIHBhcnRpY2xlIGRpYW1ldGVyLlxyXG5leHBvcnQgY29uc3QgYjJfbWF4VHJpYWREaXN0YW5jZSA9IDIuMDtcclxuZXhwb3J0IGNvbnN0IGIyX21heFRyaWFkRGlzdGFuY2VTcXVhcmVkOiBudW1iZXIgPSBiMl9tYXhUcmlhZERpc3RhbmNlICogYjJfbWF4VHJpYWREaXN0YW5jZTtcclxuXHJcbi8vLyBUaGUgaW5pdGlhbCBzaXplIG9mIHBhcnRpY2xlIGRhdGEgYnVmZmVycy5cclxuZXhwb3J0IGNvbnN0IGIyX21pblBhcnRpY2xlU3lzdGVtQnVmZmVyQ2FwYWNpdHkgPSAyNTY7XHJcblxyXG4vLy8gVGhlIHRpbWUgaW50byB0aGUgZnV0dXJlIHRoYXQgY29sbGlzaW9ucyBhZ2FpbnN0IGJhcnJpZXIgcGFydGljbGVzIHdpbGwgYmUgZGV0ZWN0ZWQuXHJcbmV4cG9ydCBjb25zdCBiMl9iYXJyaWVyQ29sbGlzaW9uVGltZSA9IDIuNTtcclxuIl19